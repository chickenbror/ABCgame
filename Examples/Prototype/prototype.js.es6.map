{"version": 3, "mappings": ";;;;;;;;;;;;;;;;;;;;;AAoBC;IACI;;IACAA,0iBAAmB,KAAA;;;;;;;;;;;;;;;;;;;;;IACnB,OAAOA;AAHX;AAOA,eAAA;IACI;IACA;;QACI,IAAAC,UAAc;QACd,IAAAC,aAAiB;QAEjBC,OAAK;QACL,OAAM,CAAAA,IAAA,IAAA,CAAM,KAAN,CAAN;YACI,IAAAF,UAAcG,MAAAC,OAAA,CAAc,4BAAd;YACd,IAAAC,cAAkBC,aAAA,CAAc,IAAAN,OAAd;YAClB,IAAG,CAAI,IAAAK,WAAJE,OAAA,GAAA,CAAsB,CAAtB,CAAH;gBACIL,OAAK;YADT;QAHJ;QAMA,IAAAD,aAAiBE,MAAAK,OAAA,CAAc,IAAAH,WAAd,EAAkC,IAAAA,WAAJE,OAA9B;IAXrB;AAFJ;;AAgBA,OAAM,CAAAE,OAAA,IAAA,CAAS,IAAT,CAAN;IAGIC,OAAKC,SAAA;IACLC,SAAOF,IAAAG;IACPC,YAAUJ,IAAAK;IAEVC,QAAM;IACN,IAAG,CAAAA,KAAA,IAAA,CAAO,CAAP,CAAH;mBACI,CAAM,iFAAN;IADJ;IAGA,OAAM,CAAAA,KAAA,EAAA,CAAM,CAAN,CAAN;QAGIC,MAAMH,SAAA,CAAU,CAAV;QACNI,iSAAU,KAAA;;;;;;;;;;;QAEVC,QAAQC,KAAA,CAAM,gBAAN;QAGR,cAAG,CAAAD,KAAAE,MAAA,EAAA,EAAiBH,OAAjB,CAAH;uBACI,CAAM,WAAN;YACAF,KAAAA,EAAAA,EAAO;YACPF,SAAAQ,IAAA,CAAc,CAAd;QAHJ;YAMA,cAAK,CAAAH,KAAAE,MAAA,EAAA,EAAiB,CAAC,MAAD,EAAQ,MAAR,CAAjB,CAAL;gBACIE,OAAOT,SAAAQ,IAAA,CAAc,CAAd;gBACPR,SAAAU,OAAA,CAAiBD,IAAjB;YAFJ;gBAIA,IAAK,CAAAJ,KAAAE,MAAA,EAAA,IAAA,CAAe,aAAf,CAAL;oBACIL,QAAM;gBADV;oBAEA,IAAK,CAAAG,KAAAE,MAAA,QAAA,EAAA,EAAe,CAAf,CAAA,IAAA,CAAmB,SAAnB,CAAL;wBACII,YAAUN,KAAAE,MAAA,QAAA,CAAc,CAAd;wBACVK,UAAA,CAAWT,GAAX,CAAAU,OAAA,CAAuBF,SAAvB;mCACA,CAAM,0CAAN;oBAHJ;wBAKA,IAAK,CAAAN,KAAAE,MAAA,EAAA,IAAA,CAAe,MAAf,CAAL;4BACIO,YAAUzB,MAAAC,OAAA,CAAcc,OAAd;uCACV,CAAO,CAAAU,eAAA,EAAA,EAAW,CAAX,CAAA,EAAA,CAAc,CAAA,GAAA,EAAA,CAAK,CAAIA,SAAJC,OAAA,EAAA,CAAe,CAAf,CAAL,CAAd,CAAP;wBAFJ;uCAKI,CAAM,qBAAN;wBALJ;oBALA;gBAFA;YAJA;QANA;IATJ;IAiCA,IAAG,CAAAb,KAAA,EAAA,CAAM,GAAN,CAAH;QAEIG,QAAMC,KAAA,CAAM,wBAAN;QAGN,IAAG,CAAAD,KAAAE,MAAA,EAAA,IAAA,CAAe,KAAf,CAAH;YACIL,QAAM;QADV;uBAKI,CAAM,SAAN;YACAP,UAAQ;QANZ;IALJ;QAaIO,QAAM;IAbV;AA5CJ", "sources": ["prototype.py"], "names": ["cats_with_letter", "this.letter", "this.five_cats", "done", "random", "random.choice", "this.candidates", "eligible_cats", "this.candidates.length", "random.sample", "playing", "ques", "questions", "letter", "ques.letter", "five_cats", "ques.five_cats", "tally", "cat", "answers", "reply", "input", "reply.lower", "five_cats.pop", "skip", "five_cats.append", "new_thing", "categories", "categories[cat].append", "an_answer", "an_answer.length"], "sourcesContent": ["categories={\n    'a day of the week':['monday','tuesday','wednesday','thursday','friday','saturday','sunday'],\n    'a fruit':['apple', 'avocado', 'apricot', 'banana', 'cantaloupe', 'cherries','cherry', 'clementine', 'date', 'grapefruit', 'grapes','grape', 'honeydew', 'melon', 'lemon', 'lime', 'mandarin', 'orange', 'mango', 'orange', 'papaya', 'peach', 'pear', 'pineapple', 'plantain', 'plum', 'pomelo', 'tangerine', 'watermelon', 'strawberry', 'strawberries', 'blueberry', 'blueberries', 'lingonberries', 'lingonberry', 'dragonfruit', 'tomato', 'pawpaw', 'lychee', 'kiwifruit', 'jackfruit', 'durian', 'guava', 'passionfruit'],\n    'an EU country':['austria', 'belgium', 'bulgaria', 'croatia', 'cyprus', 'czech republic', 'czechia', 'denmark', \n                     'estonia', 'finland', 'france', 'germany', 'greece', 'hungary', 'ireland', 'italy', \n                     'latvia', 'lithuania', 'luxembourg', 'malta', 'netherlands', 'hollandm', 'poland', 'portugal', \n                     'romania', 'slovakia', 'slovenia', 'spain', 'sweden'],\n    'a name of a month':['january','february','march','april','may','june','july','august','september','october','november','december'],\n    'a swear word':['fuck','bitch','damn','cunt','motherfucker','bugger','bloody','shit','arsehole', 'asshole','prick','bastard','wanker'],\n    \n    'a country in Asia':['russia', 'china', 'india', 'kazakhstan', 'saudi arabia', 'iran', 'mongolia', 'indonesia', 'pakistan', 'turkey', 'myanmar', 'afghanistan', 'yemen', 'thailand', 'turkmenistan', 'uzbekistan', 'iraq', 'japan', 'vietnam', 'malaysia', 'oman', 'philippines', 'laos', 'kyrgyzstan', 'syria', 'cambodia', 'bangladesh', 'nepal', 'tajikistan', 'north korea', 'south korea', 'jordan', 'azerbaijan', 'united arab emirates','uae', 'georgia', 'sri lanka', 'bhutan', 'taiwan', 'armenia', 'israel', 'kuwait', 'east timor', 'qatar', 'lebanon', 'cyprus', 'northern cyprus', 'palestine', 'brunei', 'bahrain', 'singapore', 'maldives'],\n    'a country that has won Eurovision':['luxembourg', 'portugal', 'switzerland', 'russia', 'sweden', 'estonia', 'serbia', 'monaco', 'denmark', 'israel', 'norway', 'greece', 'france', 'spain', 'azerbaijan', 'belgium', 'italy', 'yugoslavia', 'finland', 'latvia', 'germany', 'ireland', 'austria', 'turkey', 'united kingdom', 'ukraine', 'netherlands',],\n    'a capital city in Europe':['amsterdam', 'andorra la vella', 'ankara', 'athens', 'baku', 'belgrade', 'berlin', 'bern', 'bratislava', 'brussels', 'bucharest', 'budapest', 'chisinau', 'kishinev', 'copenhagen', 'dublin', 'helsinki', 'kyiv', 'lisbon', 'ljubljana', 'london', 'luxembourg', 'madrid', 'minsk', 'monaco', 'moscow', 'nicosia', 'nur-sultan', 'oslo', 'paris', 'podgorica', 'prague', 'reykjavik', 'riga', 'rome', 'san marino', 'sarajevo', 'skopje', 'sofia', 'stockholm', 'tallinn', 'tbilisi', 'tirana', 'vaduz', 'valletta', 'vatican', 'vienna', 'vilnius', 'warsaw', 'yerevan', 'zagreb', 'north nicosia', 'pristina', 'stepanakert', 'sukhumi', 'tiraspol', 'tskhinvali', 'south ossetia'],\n    'a common pet':['bird','fish', 'mouse', 'rat', 'dog', 'cat', 'gerbil', 'hamster', 'spider', 'snake', 'ferret', 'goldfish', 'turtle', 'rabbit', 'pig', 'goat', 'guinea', 'pig', 'frog', 'hedgehog', 'horse', 'chicken', 'duck', 'goose', 'budgie', 'parrot', 'canary'],\n    'a vegetable':['pumpkin', 'squash', 'mushroom', 'bakchoy', 'kale', 'arugula', 'rocket', 'broccoli', 'spinash', 'carrot', 'cabbage', 'beetroot', 'celery', 'zucchini', 'potato', 'onion', 'cucumber', 'eggplant', 'aubergine', 'corn', 'cauliflower', 'asparagus'], \n    \n    \n    \n}\n\ndef eligible_cats(letter):\n    '''Returns a list of categories that contain things starting with *letter. '''\n    cats_with_letter = [cat for cat in categories if len([t for t in categories[cat] if t[0]==letter])>0]\n    return cats_with_letter\n\nimport random\n\nclass questions():\n    '''A questions object, with a letter and a list of five relevant categories. '''\n    def __init__(self): \n        self.letter = ''\n        self.five_cats = []\n        \n        done=False\n        while done==False:\n            self.letter = random.choice('abcdefghijklmnopqrstvvwxyz') # choose a random letter\n            self.candidates = eligible_cats(self.letter) \n            if len(self.candidates)>=5: # Check if there are 5 or more eligible categories, if not, choose a new letter.\n                done=True\n\n        self.five_cats = random.sample(self.candidates,len(self.candidates)) # choose random 5+ elgible categories\n\nplaying=True\nwhile playing==True:\n    \n    # A random letter & relavant 5 categories for the new round\n    ques=questions()\n    letter=ques.letter\n    five_cats=ques.five_cats\n\n    tally=0 # Correctly answered count\n    if tally==0:\n        print(f'Your letter is {letter.upper()}. Answer or say \"pass\", \"hint\", \"start again\". ')\n\n    while tally<5:\n        \n        #Start from the top of five_cats\n        cat = five_cats[0] \n        answers = [thing for thing in categories[cat] if thing[0]==letter] # list of things starting with letter\n\n        reply = input(f'Name {cat}...')\n        \n        # Anwser matches\n        if reply.lower() in answers:\n            print('Yaaaaay! ')\n            tally+=1\n            five_cats.pop(0)\n        \n        # If skipping, move cat to the last\n        elif reply.lower() in ['skip','pass']:\n            skip = five_cats.pop(0)\n            five_cats.append(skip)\n        \n        elif reply.lower()=='start again':\n            tally=100\n        elif reply.lower()[:7]=='update ':\n            new_thing=reply.lower()[7:]\n            categories[cat].append(new_thing)\n            print(f'I\\'ve learnt that {new_thing} is {cat}!')\n        \n        elif reply.lower()=='hint':\n            an_answer=random.choice(answers)\n            print( an_answer[:3]+'-'*(len(an_answer)-3) )\n        \n        else:\n            print('Wrong! Try again...')\n    \n    if tally<100:\n        # After getting 5 tallies \n        reply=input('Well done! Play again?')\n\n        #Reset tally\n        if reply.lower()=='yes':\n            tally=0\n\n        #Exit the loop   \n        else:\n            print('Ok bye!')\n            playing=False\n    else:\n        tally=0"]}