LT2216 Project

Collaborators:
	Hsien-hao Calvin Liao
	Eirini Tsakiri
	
//Write this in Markdown


(1) state clearly at the beginning of the project who will do what


(2) keep a project diary of who does what and when

==DONE==
1. Discussed and came up with game concept
	(2021-02-02, Eirini & Calvin)


2. Made prototype game in Python 
	(2021-02-11, Calvin)
	>>original py codes here: 
	https://tinyurl.com/lt2216-project-python
	


3. Rewrote protopype game in TypeScript
	(2021-03-03, Calvin)
	>>original ts codes here:
	https://tinyurl.com/lt2216-project
	

4. Incorporate Step3 with React & Xstate from Lab2/4 to make a web app with voice interface
	(2021-03-07, Calvin)
	--dependencies: Natural (to singularise speech-recognised words)

5. Test/debug/improvement feedback
	(2021-03-08, Eirini)

6. Added React components & updated CSS
	-Display prompts and recognised texts on screen
	-Confetti effect when winning
	-Text animation
	
	--dependencies: react-dom-confetti, react-text-loop, windups, react-reveal


==TO DO==
7. Add more 'questions' to game to make it playable

8. Make it prettier
	-Where to place different components? (button, score, subtitles etc)
	-How to adjust layout



//Presentation 2021-03-23//
present ~5 mins:
	play 30sec of radio snippet to explain "what does the game do"
		difference-- no time limit on our game due to ASR latency etc
		the game flowchart
	platform-- xstate, react, lemmatiser (natural.js nlp instead of NLTK cuz we aren't using Python)
	challenges: 
		lemmatiser overfits (eg philippines>>philippine); solution: match both original and lemmatised inputs
		letter repeat a lot; solution: added a guarding state and context.lastLetter so the new letter won't be the same
			(eg, S>>A>>K>>D>>S... instead of S>>S>>S... in a row )

	"which parts of the course was most useful? how did we apply them?" ...the labs (forced us to do hands-on)??
	"how can the game be developed in the future?" 
		...shorter latency? 
		fuzzy match? sound effect? 
		other speechRecog APIs (to be workable in other browsers)?
		use web crawler to generate questions (categories+things) from eg Wikipedia articles?
		apply SSXML, eg "Your letter is <em> A </em> for <em> Adam </em> ..."

live demo ~5 mins:
	(show tinyurl & qr code if anyone wants to try)
	play one round of game
	try saying other keywords: pass, hint, restart, repeat the letter

