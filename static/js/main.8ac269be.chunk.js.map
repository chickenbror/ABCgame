{"version":3,"sources":["game.js","dmGame.ts","index.tsx"],"names":["obj","require","eligibleQues","letter","ques","questions","validCats","forEach","que","answers","validAns","ans","push","length","randomChoice","items","Math","random","pickRandomLetter","candidates","done","candidate","okAnswers","array","curId","randId","floor","tmp","shuffleArray","this","makeNewQuestions","arr","nounInflector","NounInflector","singular","singularize","letterNow","context","toUpperCase","questionNow","category","giveHint","anAns","hint","slice","say","text","send","_context","type","value","sharedRecognitions","target","cond","sayKeyword","recResult","promptAndAsk","promptEvent","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","exists","input","keywords","some","keyword","includes","reply","toLowerCase","console","log","dmMachine","init","CLICK","stop","actions","assign","tally","undefined","scoreStr","confettiSwitch","start","qs","restart","sayletter","askQues","RECOGNISED","replySing","answerMatches","shift","skipped","always","checkscore","winning","playagain","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","onClick","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.8ac269be.chunk.js","sourcesContent":["\"use strict\";\r\n\r\n//A JSON object. Can be read from an external .json file\r\nconst obj = require('./questions.json') //only works on server-end eg Node.js\r\n\r\n\r\n// console.log(obj.questions) //list of cat+answers\r\nfunction eligibleCats(letter) {\r\n    let ques = obj.questions;\r\n    let validCats = [];\r\n    ques.forEach(que => {\r\n        let cat = que.category;\r\n        let answers = que.answers;\r\n        let validAns = [];\r\n        answers.forEach(ans => {\r\n            if (ans[0] === letter) {\r\n                validAns.push(ans);\r\n            }\r\n        });\r\n        if (validAns.length > 0) {\r\n            validCats.push(cat);\r\n        }\r\n    });\r\n    return validCats;\r\n}\r\nfunction eligibleQues(letter) {\r\n    let ques = obj.questions;\r\n    let validCats = [];\r\n    ques.forEach(que => {\r\n        let answers = que.answers;\r\n        let validAns = [];\r\n        answers.forEach(ans => {\r\n            if (ans[0] === letter) {\r\n                validAns.push(ans);\r\n            }\r\n        });\r\n        if (validAns.length > 0) {\r\n            validCats.push(que);\r\n        }\r\n    });\r\n    return validCats;\r\n}\r\n//let eligibleList= eligibleQues('h') //given a letter => a list of que objects\r\n// console.log(eligibleList[0])\r\nfunction shuffleArray(array) {\r\n    let curId = array.length;\r\n    // There remain elements to shuffle\r\n    while (0 !== curId) {\r\n        // Pick a remaining element\r\n        let randId = Math.floor(Math.random() * curId);\r\n        curId -= 1;\r\n        // Swap it with the current element.\r\n        let tmp = array[curId];\r\n        array[curId] = array[randId];\r\n        array[randId] = tmp;\r\n    }\r\n    return array;\r\n}\r\nexport function randomChoice(items) {\r\n    let choice = items[items.length * Math.random() | 0];\r\n    return choice;\r\n}\r\nfunction pickRandomLetter() {\r\n    let alphabet = 'abcdefghijklmnopqrstvvwxyz';\r\n    let letter;\r\n    let candidates;\r\n    let done = false;\r\n    while (done === false) {\r\n        letter = randomChoice(alphabet);\r\n        candidates = eligibleQues(letter);\r\n        //Need at least 5 ques\r\n        if (candidates.length >= 5) {\r\n            done = true;\r\n        }\r\n    }\r\n    candidates.forEach(candidate => {\r\n        let answers = candidate.answers;\r\n        let okAnswers = [];\r\n        answers.forEach(ans => {\r\n            if (ans[0] === letter) {\r\n                okAnswers.push(ans);\r\n            }\r\n        });\r\n        candidate.answers = okAnswers;\r\n    });\r\n    candidates = shuffleArray(candidates);\r\n    return [letter, candidates];\r\n}\r\nclass questions {\r\n    constructor(letter, ques) {\r\n        this.letter = letter;\r\n        this.ques = ques;\r\n    }\r\n}\r\n//Instanticates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \r\n//each question object has .category & .answers (array of things in that category and begins with the letter)\r\nexport function makeNewQuestions() {\r\n    let arr = pickRandomLetter();\r\n    let letter = arr[0];\r\n    let ques = arr[1];\r\n    let questionsObj = new questions(letter, ques);\r\n    return questionsObj;\r\n}\r\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\r\n// console.log(q.letter);\r\n// console.log(q.ques);\r\n\r\nfunction game() {\r\n    let playing = true;\r\n    while (playing === true) {\r\n        let quesObj = makeNewQuestions();\r\n        let letter = quesObj.letter; //A random letter\r\n        let ques = quesObj.ques; //5 more more question-sets (categories+answers)\r\n        let tally = 0; // If incorporating with xstate, use this as context.tally...?\r\n        if (tally === 0) {\r\n            alert(`Your letter is ${letter.toUpperCase()}...`);\r\n        }\r\n        while (tally < 5) {\r\n            let que = ques[ques.length - 1]; //start from the last \r\n            let cat = que.category;\r\n            let answers = que.answers;\r\n            let userInput = prompt(`Name ${cat}...`);\r\n            let reply = userInput.toLowerCase();\r\n            if (answers.includes(reply)) {\r\n                alert(\"Correct!\");\r\n                tally += 1;\r\n                ques.pop(); //remove the last\r\n            }\r\n            else if (reply === 'hint') {\r\n                let anAns = randomChoice(answers);\r\n                //hint 3 letters\r\n                if (anAns.length >= 3) {\r\n                    let hint = anAns.slice(0, 3); //first 3 letters\r\n                    let rest = '-'.repeat(anAns.slice(3).length);\r\n                    alert(hint + rest);\r\n                }\r\n                //in case word is too short>>hint only 1 letter\r\n                else {\r\n                    let hint = anAns.slice(0); //first letter\r\n                    let rest = '-'.repeat(anAns.slice(1).length);\r\n                    alert(hint + rest);\r\n                }\r\n            }\r\n            else {\r\n                alert('Try again!');\r\n            }\r\n        }\r\n        if (tally >= 5) {\r\n            let reply = prompt('Well done! Play again?');\r\n            let yesReplies = ['yes', 'okay', 'sure', 'ok'];\r\n            if (yesReplies.includes(reply.toLowerCase())) {\r\n                tally = 0;\r\n            }\r\n            else {\r\n                alert('Ok bye!');\r\n                playing = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// game()\r\n","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\r\n\r\n//Instantiate a new obj for each new round of game\r\nimport { makeNewQuestions, randomChoice } from './game'\r\n// let qs=makeNewQuestions()\r\n// console.log(qs.letter)\r\n// console.log(qs.ques)\r\n\r\n//Using \"Natural\" NLP library\r\nconst natural = require('natural'),\r\nnounInflector = new natural.NounInflector();\r\nlet singular = nounInflector.singularize('those tomatoes');\r\nconsole.log(singular); //>>those tomato\r\n\r\n\r\n\r\n\r\n\r\n//Say the current random letter and a 'spelling/phonetic' alphabet\r\nfunction letterNow(context:SDSContext){\r\n    let alphabet:any = {\r\n        'a':'Adam', 'b':'Bella', 'c':'Cindy', 'd':'Daniel', 'e':'Eva', 'f':'Francesca', 'g':'Gabriel', 'h':'Harry',\r\n        'i':'Ida', 'j':'Julia', 'k':'Kevin', 'l':'Laura', 'm':'Michael', 'n':'Nicole', 'o':'Oscar', 'p':'Paula',\r\n        'q':'Quebec', 'r':'Rachel', 's':'Sara', 't':'Tina', 'u':'unique', 'v':'Victoria', 'w':'window', 'x':'x-ray',\r\n        'y':'yesman', 'z':'zero'\r\n        }\r\n    let letter:string = context.letter\r\n    return `Your letter is ${letter.toUpperCase()} for ${alphabet[letter]}. `\r\n}\r\n\r\nfunction questionNow(context:SDSContext){\r\n    let category = context.questions[0].category //the question at front of array\r\n    return `Name ${category}. `\r\n}\r\n\r\nfunction giveHint(context:SDSContext){\r\n    let answers = context.questions[0].answers //answers to the question at front of array\r\n    let anAns = randomChoice(answers)\r\n    if (anAns.length >= 3) {\r\n        let hint = anAns.slice(0, 3).toUpperCase() //first 3 letters\r\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\r\n    }\r\n    //in case word is too short>>hint only 2 letters\r\n    else {\r\n        let hint = anAns.slice(0, 2).toUpperCase() //first 2 letters\r\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\r\n    }\r\n}\r\n\r\n//Partial match of user input, as long as input mentions an answer\r\nfunction answerMatches(input:string,context:SDSContext){\r\n    let reply = input.toLowerCase() //convert to lowercase\r\n    let replySing = nounInflector.singularize( reply ) //convert to singular form\r\n\r\n    let answers = context.questions[0].answers //answers to the question at front of array\r\n\r\n    //True if reply--either original or singularised--mentions an answer \r\n    //(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\r\n    return  (exists(reply, answers) || exists(replySing, answers)) \r\n}\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction sharedRecognitions() {\r\n    return [\r\n        { target: 'stop', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'stop' },\r\n        { target: 'restart', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'restart' },\r\n        { target: \".nomatch\" }\r\n        ]\r\n}\r\n\r\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: promptEvent,\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n            nomatch: { entry: [say(\"Try again\")],  \r\n                       on: { ENDSPEECH: \"prompt\" } \r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Similar to python: any(keyword in input for keyword in keywords)\r\nfunction exists(input:string, keywords:string[]){\r\n    let existence = keywords.some(keyword => input.includes(keyword))\r\n    return existence\r\n}\r\n//Replace this with grammar parser?\r\nfunction sayKeyword(reply: string){\r\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\", \"ok\"]\r\n    let no=[\"no\", \"nope\", \"no thanks\", \"nah\",]\r\n    let pass=[\"skip\", \"pass\", \"next\",]\r\n    let hint=[\"hint\", \"clue\", \"help\"]\r\n    let whatletter=['letter','repeat']\r\n    let stop=['stop','end the game','shut down']\r\n    let restart=['restart','start again', 'reboot']\r\n\r\n    reply=reply.toLowerCase()\r\n    if(exists(reply, yes)){ return 'yes' }\r\n    if(exists(reply, no)){ return 'no' }\r\n    if(exists(reply, pass)){ return 'pass' }\r\n    if(exists(reply, hint)){ return 'hint' }\r\n    if(exists(reply, whatletter)){ return 'whatletter' }\r\n    if(exists(reply, stop)){ return 'stop' }\r\n    if(exists(reply, restart)){ return 'restart' }\r\n}\r\n\r\n/*\r\nNOTES\r\nSwear words are censored so won't match. Unless change them to f*** in the JSON\r\n? Find out how to show prompts & recognised text on screen\r\n? Confetti effect in winning state\r\n! Need to lemmatize userinput. Use js-lemmatizer, Natural, and/or Wink libraries \r\n*/\r\n\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'start'\r\n            }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok bye!\"),\r\n            on: { ENDSPEECH: {\r\n                actions: assign((context) => { return { tally: undefined, scoreStr:\"\", recResult:'',confettiSwitch:false } }),\r\n                target:\"init\",\r\n                } \r\n            }\r\n        },\r\n        //Start new game: initiate new game object & reset tally counter\r\n        start: {\r\n            entry: say(\"Starting the game \"),\r\n            on: { ENDSPEECH: {\r\n                actions: assign((context) => { \r\n                    let qs=makeNewQuestions();\r\n                    return { letter: qs.letter, questions: qs.ques, tally: 0, scoreStr:\"Score: \", confettiSwitch:false } }),\r\n                target:\"sayletter\",\r\n                } \r\n            } \r\n        },\r\n        restart: {\r\n            entry: say(\"Ok, starting over\"),\r\n            // always: 'sayletter'\r\n            on: { ENDSPEECH: {\r\n                    actions: assign((context) => { \r\n                        let qs=makeNewQuestions();\r\n                        return { letter: qs.letter, questions: qs.ques, tally:0, recResult:'', confettiSwitch:false} }),\r\n                    target:\"sayletter\",\r\n                    } \r\n            } \r\n        },\r\n        //Say the letter\r\n        sayletter:{\r\n            entry: send((context)=>({ type: \"SPEAK\", value: letterNow(context) })),\r\n            on: {ENDSPEECH:'askQues' }\r\n        },\r\n\r\n        //Ask questions 1~5\r\n        askQues: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    \r\n                    // //If answer matches answers, tally+=1, shift question[0]\r\n                    // TODO: lower and lemmatize recResult\r\n                    {cond: (context:SDSContext) => answerMatches(context.recResult, context),\r\n                     actions: assign((context:SDSContext) => { \r\n                        context.questions.shift()\r\n                        return { tally: context.tally+1 } }),\r\n                     target:\"checkscore\"  },\r\n                    \r\n                    //If pass, move the question to the last (unshift & push)\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='pass',\r\n                     actions: assign((context:SDSContext) => { \r\n                        let skipped=context.questions.shift();\r\n                        context.questions.push(skipped)\r\n                        return { } }),\r\n                     target:\"checkscore\"  },\r\n\r\n                    //Hint 3 or 2 letters\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='hint', target:\"hint\"},\r\n                    //Repeat letter\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='whatletter', target:\"sayletter\"},\r\n\r\n                    //Else    \r\n                    ...sharedRecognitions(),\r\n                    \r\n                ]},\r\n                ...promptAndAsk( send((context)=>({ type: \"SPEAK\", \r\n                                                    value: questionNow(context) })) )\r\n        },\r\n\r\n        hint: {\r\n            entry: send((context)=>({ type: \"SPEAK\", value: giveHint(context) })),\r\n            always: 'checkscore'\r\n        },\r\n        \r\n        checkscore:{\r\n            always: [\r\n                //Less than 5 correct\r\n                { target: 'askQues', cond: (context) => context.tally<5 },\r\n\r\n                //5 correct\r\n                { target: 'winning', cond: (context) => context.tally>=5 },\r\n            ]\r\n        },\r\n\r\n        winning: {\r\n            entry: [say(\"Winner winner chicken dinner\"), assign((context) => { return { confettiSwitch:true, recResult:'' } })], \r\n            //Confetti effect?\r\n            on: {ENDSPEECH:{target:'playagain'}}\r\n        },\r\n        playagain: {\r\n            on: {\r\n                RECOGNISED: [\r\n                     //Play again? restart:stop\r\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='yes', target:\"restart\"},\r\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='no', target:\"stop\"},\r\n\r\n                    //Else    \r\n                    ...sharedRecognitions() \r\n                ]},\r\n                ...promptAndAsk( say('Want to play again?') )\r\n        }, \r\n        \r\n    },\r\n\r\n})","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from './dmGame';\r\n\r\n// import Confetti from 'react-confetti'\r\n\r\nimport Confetti from 'react-dom-confetti';\r\n\r\n\r\n\r\n\r\n\r\n\r\n// inspect({\r\n//     url: \"https://statecharts.io/inspect\",\r\n//     iframe: false\r\n// });\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine  //dmGame\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        // TIMEOUT:\"..recStop\", //mic off so that say() can work\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Play game!\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nexport default function App() {\r\n    \r\n\r\n\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a voice input.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            }),\r\n            speak: asEffect((context) => {\r\n\t            console.log('Speaking...');\r\n                speak({text: context.ttsAgenda })\r\n            }) \r\n        }\r\n    });\r\n    const { confettiSwitch } = current.context;\r\n    const { scoreStr } = current.context;\r\n    const { tally } = current.context;\r\n    const { recResult } = current.context;\r\n    const { ttsAgenda } = current.context;\r\n    // let scoreDisplay= (!tally)? '':'Score: ' //Only show it when tally!=undefined\r\n    \r\n    // Config for confetti, triggered when context.confettiSwitch===true\r\n    const config = {\r\n        angle: 90,\r\n        spread: 360,\r\n        startVelocity: 80,\r\n        elementCount: 350,\r\n        dragFriction: 0.12,\r\n        duration: 5000,\r\n        stagger: 1,\r\n        width: \"7px\",\r\n        height: \"7px\",\r\n        perspective: \"210px\",\r\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n      };\r\n      \r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            \r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n            \r\n            <div className='confetti'>\r\n\r\n                {/* <Confetti recycle={false} numberOfPieces={500} \r\n                width={window.innerWidth} height={window.innerHeight+200} /> */}\r\n                \r\n                <Confetti active={ confettiSwitch } config={ config }/>\r\n                \r\n\r\n                <h2> {scoreStr} <strong>{tally}</strong> </h2>\r\n                {/* <h2> {scoreDisplay} {tally}</h2> */}\r\n                <h2><code> 😼  <strong>{ttsAgenda}</strong> </code></h2>\r\n                <h3> 😅 <strong>{recResult}</strong> </h3>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n        \r\n    )\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}