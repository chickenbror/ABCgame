{"version":3,"sources":["game_codes/game.js","dmGame.ts","App.tsx","index.tsx"],"names":["obj","require","eligibleQues","letter","questions","filter","que","answers","some","ans","randomChoice","items","length","Math","random","makeNewQuestions","candidates","done","forEach","candidate","ques","array","curId","randId","floor","tmp","shuffleArray","nounInflector","NounInflector","clearRecResult","assign","context","recResult","clearTTSAgenda","ttsAgenda","resetTally","tally","clearLetter","undefined","confettiOn","confettiSwitch","confettiOff","gameOn","playingNow","gameOff","newGameRound","qs","console","log","lastLetter","rememberLetter","letterNow","toUpperCase","questionNow","category","giveHint","anAns","hint","slice","say","text","send","_context","type","value","sharedRecognitions","target","cond","sayKeyword","promptAndAsk","promptEvent","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","exists","input","keywords","keyword","includes","reply","toLowerCase","dmMachine","init","CLICK","stop","actions","start","restart","chooseNewLetter","always","checkLastLetter","sayletter","askQues","RECOGNISED","replySing","singularize","answerMatches","shift","skipped","push","checkscore","winning","playagain","HeadShake","RubberBand","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","state","speakingText","promptMsg","matches","className","style","animation","mask","interval","springConfig","stiffness","damping","useWindupString","spokentext","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","clicked","isChrome","isEdge","currentScore","maxScore","size","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","onClick","voiceIn","YourSubtitles","emoji","subtitlesText","textAnimated","YourLetter","HeartBar","y","xmlns","viewBox","x","x1","y1","x2","y2","offset","stopColor","stopOpacity","fill","d","clipPath","textAnchor","color","fontSize","opacity","animationDelay","PopoverButtons","content","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.8ccb27a7.chunk.js","sourcesContent":["\"use strict\";\r\n\r\n//A JSON object. Can be read from an external .json file\r\nconst obj = require('./questions.json') //only works on server-end eg Node.js\r\n\r\n\r\n\r\nfunction eligibleQues(letter) {\r\n    //filter questions with at least 1+ answer starting with letter\r\n    let validQues = obj.questions.filter( que => \r\n        que.answers.some(\r\n            ans => ans[0]===letter ) )\r\n    return validQues; //array of questions containing at least 1 ans that starts with letter (could be empty)\r\n}\r\n\r\n//let eligibleList= eligibleQues('h') //given a letter => a list of que objects\r\n// console.log(eligibleList[0])\r\n\r\nfunction shuffleArray(array) {\r\n    let curId = array.length;\r\n    // There remain elements to shuffle\r\n    while (0 !== curId) {\r\n        // Pick a remaining element\r\n        let randId = Math.floor(Math.random() * curId);\r\n        curId -= 1;\r\n        // Swap it with the current element.\r\n        let tmp = array[curId];\r\n        array[curId] = array[randId];\r\n        array[randId] = tmp;\r\n    }\r\n    return array;\r\n}\r\nexport function randomChoice(items) {\r\n    let choice = items[items.length * Math.random() | 0];\r\n    return choice;\r\n}\r\n\r\n//Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \r\n//each question object has .category & .answers (array of things in that category and begins with the letter)\r\nexport function makeNewQuestions() {\r\n    let alphabet = 'abcdefghijklmnopqrstvvwxyz';\r\n    let letter;\r\n    let candidates;\r\n    let done = false;\r\n    while (done === false) {\r\n        letter = randomChoice(alphabet);\r\n        candidates = eligibleQues(letter);\r\n        //Need at least 5 ques\r\n        if (candidates.length >= 5) {\r\n            done = true;\r\n        }\r\n    }\r\n    candidates.forEach(candidate => {\r\n        //Filter answer/answers that start with letter\r\n        candidate.answers = candidate.answers.filter( ans => ans[0]===letter); \r\n    });\r\n    let ques = shuffleArray(candidates); //shuffle the order\r\n    return {letter, ques}; //returns an object with 2 properties\r\n}\r\n\r\n\r\n\r\n\r\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\r\n// console.log(q.letter);\r\n// console.log(q.ques);\r\n\r\n\r\n\r\n//>>>Below is for testing in the browser (play with text-only)<<<\r\n\r\n// function game() {\r\n//     let playing = true;\r\n//     while (playing === true) {\r\n//         let quesObj = makeNewQuestions();\r\n//         let letter = quesObj.letter; //A random letter\r\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\r\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\r\n//         if (tally === 0) {\r\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\r\n//         }\r\n//         while (tally < 5) {\r\n//             let que = ques[ques.length - 1]; //start from the last \r\n//             let cat = que.category;\r\n//             let answers = que.answers;\r\n//             let userInput = prompt(`Name ${cat}...`);\r\n//             let reply = userInput.toLowerCase();\r\n//             if (answers.includes(reply)) {\r\n//                 alert(\"Correct!\");\r\n//                 tally += 1;\r\n//                 ques.pop(); //remove the last\r\n//             }\r\n//             else if (reply === 'hint') {\r\n//                 let anAns = randomChoice(answers);\r\n//                 //hint 3 letters\r\n//                 if (anAns.length >= 3) {\r\n//                     let hint = anAns.slice(0, 3); //first 3 letters\r\n//                     let rest = '-'.repeat(anAns.slice(3).length);\r\n//                     alert(hint + rest);\r\n//                 }\r\n//                 //in case word is too short>>hint only 1 letter\r\n//                 else {\r\n//                     let hint = anAns.slice(0); //first letter\r\n//                     let rest = '-'.repeat(anAns.slice(1).length);\r\n//                     alert(hint + rest);\r\n//                 }\r\n//             }\r\n//             else {\r\n//                 alert('Try again!');\r\n//             }\r\n//         }\r\n//         if (tally >= 5) {\r\n//             let reply = prompt('Well done! Play again?');\r\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\r\n//             if (yesReplies.includes(reply.toLowerCase())) {\r\n//                 tally = 0;\r\n//             }\r\n//             else {\r\n//                 alert('Ok bye!');\r\n//                 playing = false;\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n// game()\r\n\r\n// console.log(eligibleQues('z').length)","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\r\n\r\n//Instantiate a new obj for each new round of game\r\nimport { makeNewQuestions, randomChoice } from './game_codes/game'\r\n// let qs=makeNewQuestions()\r\n// console.log(qs.letter)\r\n// console.log(qs.ques)\r\n\r\n//Using \"Natural\" NLP library\r\nconst natural = require('natural'),\r\nnounInflector = new natural.NounInflector();\r\n// let singular = nounInflector.singularize('those tomatoes');\r\n// console.log(singular); //>>those tomato\r\n\r\n\r\nconst clearRecResult: Action<SDSContext, SDSEvent> = assign((context) => { return { recResult:''} })\r\nconst clearTTSAgenda: Action<SDSContext, SDSEvent> = assign((context) => { return { ttsAgenda:''} })\r\nconst resetTally: Action<SDSContext, SDSEvent> = assign((context) => { return { tally:0} })\r\nconst clearLetter: Action<SDSContext, SDSEvent> = assign((context) => { return { letter:undefined} })\r\n\r\nconst confettiOn: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:true} })\r\nconst confettiOff: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:false} })\r\n\r\nconst gameOn: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:true} })\r\nconst gameOff: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:false} })\r\n\r\n//Initiate a questions object & assign values to context.letter/questions/tally\r\nconst newGameRound: Action<SDSContext, SDSEvent> = assign((context) => { \r\n    let qs=makeNewQuestions();\r\n    console.log(`Last round:${context.lastLetter}`)\r\n    console.log(qs.ques)\r\n    return { letter: qs.letter, questions: qs.ques, tally:0, confettiSwitch:false} \r\n})\r\n//After chosen a letter and before going saying it, remember it for referece of next game round\r\nconst rememberLetter: Action<SDSContext, SDSEvent> = assign((context) => { \r\n    return { lastLetter: context.letter} \r\n})\r\n// const remember3Letters: Action<SDSContext, SDSEvent> = assign((context) => { \r\n//     let last3Letters= context.lastLetters? context.lastLetters : []\r\n//     last3Letters.push(context.letter)\r\n//     if(last3Letters.length>3){\r\n//         last3Letters.shift()\r\n//     }\r\n//     return { lastLetters: last3Letters} \r\n// })\r\n\r\n\r\n//Say the current random letter and a 'spelling/phonetic' alphabet\r\nfunction letterNow(context:SDSContext){\r\n    let alphabet:any = {\r\n        'a':'Adam', 'b':'Bella', 'c':'Cindy', 'd':'Daniel', 'e':'Eva', 'f':'Francesca', 'g':'Gabriel', 'h':'Harry',\r\n        'i':'Ida', 'j':'Julia', 'k':'Kevin', 'l':'Laura', 'm':'Michael', 'n':'Nicole', 'o':'Oscar', 'p':'Paula',\r\n        'q':'Quebec', 'r':'Rachel', 's':'Sara', 't':'Tina', 'u':'unique', 'v':'Victoria', 'w':'window', 'x':'x-ray',\r\n        'y':'yesman', 'z':'zero'\r\n        }\r\n    let letter:string = context.letter\r\n    return `Your letter is \"${letter.toUpperCase()}\" for \"${alphabet[letter]}\". `\r\n}\r\n\r\nfunction questionNow(context:SDSContext){\r\n    let category = context.questions[0].category //the question at front of array\r\n    return `Name ${category}. `\r\n}\r\n\r\nfunction giveHint(context:SDSContext){\r\n    let answers = context.questions[0].answers //answers to the question at front of array\r\n    let anAns = randomChoice(answers)\r\n    if (anAns.length >= 3) {\r\n        let hint = anAns.slice(0, 3).toUpperCase() //first 3 letters\r\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\r\n    }\r\n    //in case word is too short>>hint only 2 letters\r\n    else {\r\n        let hint = anAns.slice(0, 2).toUpperCase() //first 2 letters\r\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\r\n    }\r\n}\r\n\r\n//Partial match of user input, as long as input mentions an answer\r\nfunction answerMatches(input:string,context:SDSContext){\r\n    let reply = input.toLowerCase() //convert to lowercase\r\n    let replySing = nounInflector.singularize( reply ) //convert to singular form\r\n\r\n    let answers = context.questions[0].answers //answers to the question at front of array\r\n\r\n    //True if reply--either original or singularised--mentions an answer \r\n    //(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\r\n    return  (exists(reply, answers) || exists(replySing, answers)) \r\n}\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction sharedRecognitions() {\r\n    return [\r\n        { target: 'stop', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'stop' },\r\n        { target: 'restart', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'restart' },\r\n        //for testing \r\n        { target: 'winning', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'shortcut' },\r\n        { target: \".nomatch\" }\r\n        ]\r\n}\r\n\r\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: promptEvent,\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n            nomatch: { entry: [say(\"Try again\")],  \r\n                       on: { ENDSPEECH: \"prompt\" } \r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\n// Similar to python: any(keyword in input for keyword in keywords)\r\nfunction exists(input:string, keywords:string[]){\r\n    let existence = keywords.some(keyword => input.includes(keyword))\r\n    return existence\r\n}\r\n//Replace this with grammar parser?\r\nfunction sayKeyword(reply: string){\r\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\", \"ok\"]\r\n    let no=[\"no\", \"nope\", \"no thanks\", \"nah\",]\r\n    let pass=[\"skip\", \"pass\", \"next\",]\r\n    let hint=[\"hint\", \"clue\", \"help\"]\r\n    let whatletter=['letter','repeat']\r\n    let stop=['stop','end the game','shut down']\r\n    let restart=['restart','start again', 'reboot']\r\n    let shortcut=['short cut', 'shortcut'] //for testing\r\n\r\n    reply=reply.toLowerCase()\r\n    if(exists(reply, yes)){ return 'yes' }\r\n    if(exists(reply, no)){ return 'no' }\r\n    if(exists(reply, pass)){ return 'pass' }\r\n    if(exists(reply, hint)){ return 'hint' }\r\n    if(exists(reply, whatletter)){ return 'whatletter' }\r\n    if(exists(reply, stop)){ return 'stop' }\r\n    if(exists(reply, restart)){ return 'restart' }\r\n    if(exists(reply, shortcut)){ return 'shortcut' } //for testing\r\n}\r\n\r\n/*\r\nNOTES\r\nSwear words are censored so won't match. Unless change them to f*** in the JSON\r\n? Find out how to show prompts & recognised text on screen\r\n? Confetti effect in winning state\r\n! Need to lemmatize userinput. Use js-lemmatizer, Natural, and/or Wink libraries \r\n*/\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'start'\r\n            }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok bye!\"),\r\n            on: { ENDSPEECH: {\r\n                actions: [resetTally,clearLetter,clearTTSAgenda,clearRecResult,confettiOff, gameOff],\r\n                target:\"init\",\r\n                } \r\n            }\r\n        },\r\n        //Start/restart new game: initiate new questions-object & reset tally counter\r\n        start: {\r\n            entry: say(\"Starting the game \"),\r\n            on: { ENDSPEECH: { target:\"chooseNewLetter\" } } \r\n        },\r\n        restart: {\r\n            entry: say(\"Ok, starting over\"),\r\n            on: { ENDSPEECH: {target:\"chooseNewLetter\" } } \r\n        },\r\n        chooseNewLetter :{\r\n            always:[\r\n                {actions: [newGameRound, clearTTSAgenda, clearRecResult],\r\n                 target: \"checkLastLetter\" }\r\n            ]\r\n        },\r\n\r\n        //After choosing letter, comparing to last letter game so that the new letter is not repeated\r\n        checkLastLetter: {\r\n            always: [\r\n                //if chosen letter is the same as last ones >> choose again\r\n                { cond: (context) => !!context.lastLetter && context.letter===context.lastLetter, \r\n                    target: 'chooseNewLetter', },\r\n\r\n                //chosen letter is different from last 3 letters >> remember it & resume game\r\n                { \r\n                  actions: [rememberLetter, gameOn, ],\r\n                  target: 'sayletter',  },\r\n            ]\r\n        },\r\n\r\n        //Starting the game for real from this state\r\n        //Say the letter\r\n        sayletter:{\r\n            entry: send((context)=>({ type: \"SPEAK\", value: letterNow(context) })),\r\n            on: {ENDSPEECH:'askQues' }\r\n        },\r\n\r\n        //Ask 5 (or more if skipping) questions \r\n        askQues: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    \r\n                    // ? Clear recResult after recognition or not...?\r\n                    // If answer matches answers, tally+=1, shift question[0]\r\n                    {cond: (context:SDSContext) => answerMatches(context.recResult, context),\r\n                     actions: assign((context:SDSContext) => { \r\n                        context.questions.shift()\r\n                        return { tally: context.tally+1 } }),\r\n                     target:\"checkscore\"  },\r\n                    \r\n                    //If pass, move the question to the last (unshift & push)\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='pass',\r\n                     actions: assign((context:SDSContext) => { \r\n                        let skipped=context.questions.shift();\r\n                        context.questions.push(skipped);\r\n                        console.log(context.questions)\r\n                        return { } }),\r\n                     target:\"checkscore\"  },\r\n\r\n                    //Hint 3 or 2 letters\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='hint', target:\"hint\"},\r\n                    //Repeat letter\r\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='whatletter', target:\"sayletter\"},\r\n\r\n                    //Else    \r\n                    ...sharedRecognitions(),\r\n                    \r\n                ]},\r\n                ...promptAndAsk( send((context)=>({ type: \"SPEAK\", \r\n                                                    value: questionNow(context) })) )\r\n        },\r\n\r\n        hint: {\r\n            entry: send((context)=>({ type: \"SPEAK\", value: giveHint(context) })),\r\n            always: 'checkscore'\r\n        },\r\n        \r\n        checkscore:{\r\n            always: [\r\n                //Less than 5 correct\r\n                { target: 'askQues', cond: (context) => context.tally<5 },\r\n\r\n                //5 correct\r\n                { target: 'winning', cond: (context) => context.tally>=5 },\r\n            ]\r\n        },\r\n\r\n                    //? reset/clear tally here or not...? \r\n        winning: {\r\n            entry: [ say(\"Winner winner chicken dinner\"), confettiOn, clearTTSAgenda ], \r\n            on: {ENDSPEECH:{target:'playagain'}}\r\n        },\r\n        playagain: {\r\n            entry: [ clearRecResult, confettiOff, resetTally, clearLetter, gameOff,],\r\n            on: {\r\n                RECOGNISED: [\r\n                     //Play again? restart:stop\r\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='yes', target:\"restart\"},\r\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='no', target:\"stop\"},\r\n\r\n                    //Else    \r\n                    ...sharedRecognitions() \r\n                ]},\r\n                ...promptAndAsk( say('Want to play again?') )\r\n        }, \r\n        \r\n    },\r\n\r\n})","import * as React from \"react\";\r\n\r\n//XState library & Game DM-machine\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { dmMachine } from './dmGame';\r\n\r\n\r\n//Animation effects\r\nimport Confetti from 'react-dom-confetti';\r\nimport TextLoop from \"react-text-loop\";\r\nimport { useWindupString, WindupChildren } from \"windups\";\r\n        // import HeadShake from 'react-reveal/HeadShake';\r\nconst HeadShake = require('react-reveal/HeadShake'); //?import shows error in TS, so use require() here instead\r\nconst RubberBand = require('react-reveal/RubberBand');\r\n\r\nimport Tippy from '@tippyjs/react';\r\n// import 'tippy.js/dist/tippy.css'; \r\n\r\n\r\n\r\n//Browser detection \r\nimport { isSafari,isChrome, isEdge, isMobile} from \"react-device-detect\";\r\n\r\n\r\n// import { inspect } from \"@xstate/inspect\";\r\n// inspect({ url:\"https://statecharts.io/inspect\", iframe: false });\r\n\r\n\r\n// State machines: ASR-TTS (voice interface) & dmGame\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine  //dmGame\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;  //==dm context >>access via props.state.context\r\n}\r\n//COMPONENT: Big button in the middle, with changing texts\r\nconst ReactiveButton = (props: Props,): JSX.Element => {\r\n    const {playingNow} = props.state.context\r\n    const {ttsAgenda} = props.state.context\r\n    let speakingText= playingNow? '😼 '+ttsAgenda : '😻 '+ttsAgenda\r\n    let promptMsg = playingNow? \"...or say Clue, Skip, Restart, Stop \" : \"...say Yes or No\"\r\n\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\"}} {...props}>\r\n                    {/* Listening... */}\r\n\r\n                    <TextLoop mask={true} interval={5000} springConfig={{ stiffness: 170, damping: 8 }} >\r\n                        <div><code> {speakingText} </code></div>\r\n                        <div><code> {promptMsg} </code></div>\r\n                    </TextLoop>\r\n\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            \r\n            const [spokentext] = useWindupString(speakingText); // adds char-by-char animation\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    {/* Speaking... */}\r\n                    <code>{spokentext}</code>\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    <HeadShake>Play game!</HeadShake>\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\n// //MAIN CONTAINER: React webpage elements & VOI\r\nexport default function App() {\r\n    \r\n    //Voice interface events (& console logs)\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {send('ENDSPEECH') },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {send({ type: \"ASRRESULT\", value: result })  },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a voice input.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            }),\r\n            speak: asEffect((context) => {\r\n\t            console.log('Speaking...');\r\n                speak({text: context.ttsAgenda })\r\n            }) \r\n        }\r\n    });\r\n\r\n    // dmMachine-context / React-states, to display on webpage or turn components on/off\r\n    const { confettiSwitch } = current.context; //triggers confetti when true\r\n    const { playingNow } = current.context;\r\n    const { tally } = current.context;\r\n    const { recResult } = current.context;\r\n    const { ttsAgenda } = current.context;\r\n    const { letter } = current.context;\r\n    \r\n    // Config for confetti \r\n    const confettiConfig = {\r\n        angle: 90,\r\n        spread: 360,\r\n        startVelocity: 80,\r\n        elementCount: 400,\r\n        dragFriction: 0.12,\r\n        duration: 7500,\r\n        stagger: 1,\r\n        width: \"7px\",\r\n        height: \"7px\",\r\n        perspective: \"210px\",\r\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\r\n      };\r\n    \r\n    let clicked=0;\r\n    const handleClick = () =>{ \r\n        if(clicked===0){ console.log(\"clicked\"); send('CLICK'); clicked=1 }\r\n        else{ console.log(\"unclicked\"); send('UNCLICK'); clicked=0 }\r\n    }\r\n\r\n    //>>>JSX codes & various components\r\n    \r\n    // Alt page: Show if not using Chrome or Edge\r\n    if(!isChrome && !isEdge)\r\n    return (\r\n        <div className='OtherBrowsers'>  \r\n            <HeadShake>\r\n            <div className='Box'>   \r\n                <h1>Speech Recognition Not Supported :( </h1>\r\n                <p>I won't be able to hear you on this browser.</p>\r\n                <p>Please try Chrome or Edge. :-)</p>\r\n            </div>\r\n            </HeadShake>\r\n        </div>\r\n      )\r\n\r\n    //Show if using Chrome or Edge\r\n    return (\r\n        <div className='main'>\r\n            <div className=\"PopoverButtons\"> <PopoverButtons/> </div>\r\n            <div className=\"App\">\r\n                \r\n                <div className=\"LetterAndHeart\">\r\n                    <div className=\"GlowLetter\"> <YourLetter letter={letter}/> </div>\r\n                    <div className=\"Heart\"> \r\n                        {playingNow && <HeartBar currentScore={tally} maxScore={5} size={50} />  }\r\n                    </div> \r\n                </div>\r\n                \r\n                <Confetti active={ confettiSwitch } config={ confettiConfig }/> \r\n\r\n                <RubberBand>\r\n                    <div className=\"Button\"> \r\n                        <ReactiveButton state={current} onClick={() => {handleClick()}} /> \r\n                    </div>\r\n                </RubberBand>\r\n\r\n                <div className=\"Subtitles\"> \r\n                    <YourSubtitles voiceIn={recResult} tally={tally}/>\r\n                </div>\r\n            \r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\n//COMPONENT: Displaying input of voice interface (ie, recResult)\r\nconst YourSubtitles=(props:any) =>{\r\n    // Player's speech-- only displays when recResult!=undefined \r\n\r\n    //Prefix face changes based on score of the game\r\n    const  emojis=['😗','🙂','😀','😄','😁','🥳']\r\n    let emoji=props.tally? emojis[props.tally]:'🙃'\r\n\r\n    // const subtitlesText = props.voiceIn? props.voiceIn : ''\r\n    const subtitlesText = \"this is testing text\"\r\n    const [textAnimated] = useWindupString(subtitlesText);\r\n    return(\r\n        <div>\r\n            <div id=\"speech-bubble\"> {textAnimated} </div>\r\n            {(subtitlesText!='') && <h4>{emoji}</h4>}\r\n        </div>\r\n    )\r\n}\r\n\r\n//COMPONENT: Current score (number & hearts)\r\n// const Scoreboard=(props:any) =>{\r\n//     // Shows score and hearts when tally>=1 \r\n//     const tally = props.tally\r\n//     // const scoreNum = tally? tally : '' \r\n//     const hearts = tally? '💛'.repeat(tally) : '' \r\n//     return(\r\n//         <div>\r\n//             {/* <h1>{scoreNum}</h1> */}\r\n//             <RubberBand>\r\n//             <h2> {hearts}</h2>\r\n//             </RubberBand>\r\n\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n//COMPONENT: Capital letter of the game\r\nconst YourLetter=(props:any) =>{\r\n    // Shows the letter of the current game round \r\n    const letter = props.letter\r\n    return(\r\n        <div> \r\n            {letter? letter.toUpperCase():''}\r\n        </div> \r\n    )\r\n}\r\n\r\n//COMPONENT: Grey heart to be filled with pink, based on percentage\r\nconst HeartBar = (props:any) => {\r\n    \r\n    const maxScore = props.maxScore\r\n    const currentScore = props.currentScore>0? props.currentScore : ''\r\n    const size = props.size\r\n    const percentage = currentScore? 100*currentScore/maxScore : 0\r\n    //add other props? eg, showScore={true/false}; showPercentage={true/false}\r\n\r\n\r\n    const y = 24 - (24 * percentage) / 100; //Height of the pink filling shape\r\n\r\n    //Below: Heart-shaped vector graphs & text inside\r\n    return (\r\n      <div className=\"ProgressBarH\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={size}\r\n          height={size}\r\n          viewBox=\"0 0 24 24\"\r\n        >\r\n          <defs>\r\n            <clipPath id=\"cut-off-bottom\">\r\n              <rect x=\"0\" y={y} width=\"24\" height=\"24\" />\r\n            </clipPath>\r\n          \r\n            <linearGradient id=\"grey-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                <stop offset=\"0%\" stopColor=\"#cfccce\" stopOpacity=\"0.75\" />\r\n                <stop offset=\"60%\" stopColor=\"#bab8ba\" stopOpacity=\"0.85\" />\r\n                <stop offset=\"100%\" stopColor=\"#949293\" stopOpacity=\"0.9\" />\r\n            </linearGradient>\r\n\r\n            <linearGradient id=\"pink-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n                <stop offset=\"0%\" stopColor=\"#ff33a7\" stopOpacity=\"0.95\" />\r\n                <stop offset=\"60%\" stopColor=\"#ff2667\" stopOpacity=\"0.95\" />\r\n                <stop offset=\"100%\" stopColor=\"rgb(255,0,0)\" stopOpacity=\"0.95\" />\r\n            </linearGradient>\r\n\r\n          </defs>\r\n          \r\n          <path\r\n            style={{ fill: \"url(#grey-grad)\" }}\r\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\r\n            />\r\n\r\n          <path\r\n            style={{ fill: \"url(#pink-grad)\", }}\r\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\r\n            clipPath=\"url(#cut-off-bottom)\"\r\n            />\r\n\r\n          <text textAnchor=\"middle\" x=\"12\" y=\"15\" color=\"white\" fontSize=\"11\" fill=\"white\" opacity=\"0.45\"\r\n                style={{animation: \"wiggle 2.5s ease-out infinite\", animationDelay:'0.9s'}}>\r\n            {currentScore} \r\n          </text>\r\n\r\n        </svg>\r\n      </div>\r\n    );\r\n  };\r\n\r\nconst PopoverButtons = () => {\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Tippy content={\r\n                <div>\r\n                <h4>Having troubles playing? :</h4>\r\n            \r\n                    <p>\r\n                    Due to limitations of the voice recogniser, these might help... <br></br><br></br>\r\n                    -Speak in a North American accent.<br></br><br></br>\r\n                    -After the cat finishes talking, wait for a sec for it to start listening to you\r\n                    (indicated by the <strong>flashing button</strong>).\r\n                    </p>\r\n                </div>\r\n            } className=\"popover-box\">\r\n                <button className=\"round-button\">?</button>\r\n            </Tippy>\r\n\r\n            <Tippy content={\r\n                    <div>\r\n                    <h4>ABC Game</h4>\r\n                        <p>\r\n                        Designed & made by: <br></br>\r\n                        Liao Hsien-hao Calvin<br></br>\r\n                        Eirini Tsakiri <br></br><br></br>\r\n                        for the project of <strong>LT2216 Dialogue Systems</strong> at Göteborgs universitet.\r\n                        <br></br><br></br>\r\n                        github.com/chickenbror/ABCgame\r\n                        </p>\r\n                    </div>\r\n            }  className=\"popover-box\">\r\n                <button className=\"round-button\">i</button>\r\n            </Tippy>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\n\r\n//Components\r\nimport App from \"./App\";\r\n\r\n\r\n//React dom components rendering\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render( <App/>, rootElement );\r\n"],"sourceRoot":""}