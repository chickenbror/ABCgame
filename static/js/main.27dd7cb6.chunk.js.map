{"version":3,"sources":["game_codes/game.js","dmGame.ts","App.tsx","index.tsx"],"names":["obj","require","eligibleQues","letter","ques","questions","validCats","forEach","que","answers","validAns","ans","push","length","randomChoice","items","Math","random","pickRandomLetter","candidates","done","candidate","okAnswers","array","curId","randId","floor","tmp","shuffleArray","this","makeNewQuestions","arr","nounInflector","NounInflector","clearRecResult","assign","context","recResult","clearTTSAgenda","ttsAgenda","resetTally","tally","clearLetter","undefined","confettiOn","confettiSwitch","confettiOff","gameOn","playingNow","gameOff","newGameRound","qs","letterNow","toUpperCase","questionNow","category","giveHint","anAns","hint","slice","say","text","send","_context","type","value","sharedRecognitions","target","cond","sayKeyword","promptAndAsk","promptEvent","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","exists","input","keywords","some","keyword","includes","reply","toLowerCase","dmMachine","init","CLICK","stop","actions","start","restart","sayletter","askQues","RECOGNISED","replySing","singularize","answerMatches","shift","skipped","always","checkscore","winning","playagain","HeadShake","RubberBand","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","speakingText","promptMsg","matches","className","style","animation","mask","interval","springConfig","stiffness","damping","useWindupString","spokentext","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","clicked","isChrome","isEdge","currentScore","maxScore","size","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","onClick","voiceIn","YourSubtitles","emoji","subtitlesText","pace","char","textAnimated","YourLetter","HeartBar","y","xmlns","viewBox","x","x1","y1","x2","y2","offset","stopColor","stopOpacity","fill","d","clipPath","textAnchor","color","fontSize","opacity","animationDelay","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.27dd7cb6.chunk.js","sourcesContent":["\"use strict\";\n\n//A JSON object. Can be read from an external .json file\nconst obj = require('./questions.json') //only works on server-end eg Node.js\n\n\n// console.log(obj.questions) //list of cat+answers\nfunction eligibleCats(letter) {\n    let ques = obj.questions;\n    let validCats = [];\n    ques.forEach(que => {\n        let cat = que.category;\n        let answers = que.answers;\n        let validAns = [];\n        answers.forEach(ans => {\n            if (ans[0] === letter) {\n                validAns.push(ans);\n            }\n        });\n        if (validAns.length > 0) {\n            validCats.push(cat);\n        }\n    });\n    return validCats;\n}\nfunction eligibleQues(letter) {\n    let ques = obj.questions;\n    let validCats = [];\n    ques.forEach(que => {\n        let answers = que.answers;\n        let validAns = [];\n        answers.forEach(ans => {\n            if (ans[0] === letter) {\n                validAns.push(ans);\n            }\n        });\n        if (validAns.length > 0) {\n            validCats.push(que);\n        }\n    });\n    return validCats;\n}\n//let eligibleList= eligibleQues('h') //given a letter => a list of que objects\n// console.log(eligibleList[0])\nfunction shuffleArray(array) {\n    let curId = array.length;\n    // There remain elements to shuffle\n    while (0 !== curId) {\n        // Pick a remaining element\n        let randId = Math.floor(Math.random() * curId);\n        curId -= 1;\n        // Swap it with the current element.\n        let tmp = array[curId];\n        array[curId] = array[randId];\n        array[randId] = tmp;\n    }\n    return array;\n}\nexport function randomChoice(items) {\n    let choice = items[items.length * Math.random() | 0];\n    return choice;\n}\nfunction pickRandomLetter() {\n    let alphabet = 'abcdefghijklmnopqrstvvwxyz';\n    let letter;\n    let candidates;\n    let done = false;\n    while (done === false) {\n        letter = randomChoice(alphabet);\n        candidates = eligibleQues(letter);\n        //Need at least 5 ques\n        if (candidates.length >= 5) {\n            done = true;\n        }\n    }\n    candidates.forEach(candidate => {\n        let answers = candidate.answers;\n        let okAnswers = [];\n        answers.forEach(ans => {\n            if (ans[0] === letter) {\n                okAnswers.push(ans);\n            }\n        });\n        candidate.answers = okAnswers;\n    });\n    candidates = shuffleArray(candidates);\n    return [letter, candidates];\n}\nclass questions {\n    constructor(letter, ques) {\n        this.letter = letter;\n        this.ques = ques;\n    }\n}\n//Instanticates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \n//each question object has .category & .answers (array of things in that category and begins with the letter)\nexport function makeNewQuestions() {\n    let arr = pickRandomLetter();\n    let letter = arr[0];\n    let ques = arr[1];\n    let questionsObj = new questions(letter, ques);\n    return questionsObj;\n}\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\n// console.log(q.letter);\n// console.log(q.ques);\n\nfunction game() {\n    let playing = true;\n    while (playing === true) {\n        let quesObj = makeNewQuestions();\n        let letter = quesObj.letter; //A random letter\n        let ques = quesObj.ques; //5 more more question-sets (categories+answers)\n        let tally = 0; // If incorporating with xstate, use this as context.tally...?\n        if (tally === 0) {\n            alert(`Your letter is ${letter.toUpperCase()}...`);\n        }\n        while (tally < 5) {\n            let que = ques[ques.length - 1]; //start from the last \n            let cat = que.category;\n            let answers = que.answers;\n            let userInput = prompt(`Name ${cat}...`);\n            let reply = userInput.toLowerCase();\n            if (answers.includes(reply)) {\n                alert(\"Correct!\");\n                tally += 1;\n                ques.pop(); //remove the last\n            }\n            else if (reply === 'hint') {\n                let anAns = randomChoice(answers);\n                //hint 3 letters\n                if (anAns.length >= 3) {\n                    let hint = anAns.slice(0, 3); //first 3 letters\n                    let rest = '-'.repeat(anAns.slice(3).length);\n                    alert(hint + rest);\n                }\n                //in case word is too short>>hint only 1 letter\n                else {\n                    let hint = anAns.slice(0); //first letter\n                    let rest = '-'.repeat(anAns.slice(1).length);\n                    alert(hint + rest);\n                }\n            }\n            else {\n                alert('Try again!');\n            }\n        }\n        if (tally >= 5) {\n            let reply = prompt('Well done! Play again?');\n            let yesReplies = ['yes', 'okay', 'sure', 'ok'];\n            if (yesReplies.includes(reply.toLowerCase())) {\n                tally = 0;\n            }\n            else {\n                alert('Ok bye!');\n                playing = false;\n            }\n        }\n    }\n}\n\n// game()\n","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\n\n//Instantiate a new obj for each new round of game\nimport { makeNewQuestions, randomChoice } from './game_codes/game'\n// let qs=makeNewQuestions()\n// console.log(qs.letter)\n// console.log(qs.ques)\n\n//Using \"Natural\" NLP library\nconst natural = require('natural'),\nnounInflector = new natural.NounInflector();\n// let singular = nounInflector.singularize('those tomatoes');\n// console.log(singular); //>>those tomato\n\n\nconst clearRecResult: Action<SDSContext, SDSEvent> = assign((context) => { return { recResult:''} })\nconst clearTTSAgenda: Action<SDSContext, SDSEvent> = assign((context) => { return { ttsAgenda:''} })\nconst resetTally: Action<SDSContext, SDSEvent> = assign((context) => { return { tally:0} })\nconst clearLetter: Action<SDSContext, SDSEvent> = assign((context) => { return { letter:undefined} })\n\nconst confettiOn: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:true} })\nconst confettiOff: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:false} })\n\nconst gameOn: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:true} })\nconst gameOff: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:false} })\n\n//Initiate a questions object & assign values to context.letter/questions/tally\nconst newGameRound: Action<SDSContext, SDSEvent> = assign((context) => { \n    let qs=makeNewQuestions();\n    return { letter: qs.letter, questions: qs.ques, tally:0, confettiSwitch:false} \n})\n\n\n//Say the current random letter and a 'spelling/phonetic' alphabet\nfunction letterNow(context:SDSContext){\n    let alphabet:any = {\n        'a':'Adam', 'b':'Bella', 'c':'Cindy', 'd':'Daniel', 'e':'Eva', 'f':'Francesca', 'g':'Gabriel', 'h':'Harry',\n        'i':'Ida', 'j':'Julia', 'k':'Kevin', 'l':'Laura', 'm':'Michael', 'n':'Nicole', 'o':'Oscar', 'p':'Paula',\n        'q':'Quebec', 'r':'Rachel', 's':'Sara', 't':'Tina', 'u':'unique', 'v':'Victoria', 'w':'window', 'x':'x-ray',\n        'y':'yesman', 'z':'zero'\n        }\n    let letter:string = context.letter\n    return `Your letter is ${letter.toUpperCase()} for ${alphabet[letter]}. `\n}\n\nfunction questionNow(context:SDSContext){\n    let category = context.questions[0].category //the question at front of array\n    return `Name ${category}. `\n}\n\nfunction giveHint(context:SDSContext){\n    let answers = context.questions[0].answers //answers to the question at front of array\n    let anAns = randomChoice(answers)\n    if (anAns.length >= 3) {\n        let hint = anAns.slice(0, 3).toUpperCase() //first 3 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\n    }\n    //in case word is too short>>hint only 2 letters\n    else {\n        let hint = anAns.slice(0, 2).toUpperCase() //first 2 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\n    }\n}\n\n//Partial match of user input, as long as input mentions an answer\nfunction answerMatches(input:string,context:SDSContext){\n    let reply = input.toLowerCase() //convert to lowercase\n    let replySing = nounInflector.singularize( reply ) //convert to singular form\n\n    let answers = context.questions[0].answers //answers to the question at front of array\n\n    //True if reply--either original or singularised--mentions an answer \n    //(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\n    return  (exists(reply, answers) || exists(replySing, answers)) \n}\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction sharedRecognitions() {\n    return [\n        { target: 'stop', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'stop' },\n        { target: 'restart', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'restart' },\n        //for testing \n        { target: 'winning', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'shortcut' },\n        { target: \".nomatch\" }\n        ]\n}\n\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: promptEvent,\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            nomatch: { entry: [say(\"Try again\")],  \n                       on: { ENDSPEECH: \"prompt\" } \n            },\n        }\n    })\n}\n\n\n// Similar to python: any(keyword in input for keyword in keywords)\nfunction exists(input:string, keywords:string[]){\n    let existence = keywords.some(keyword => input.includes(keyword))\n    return existence\n}\n//Replace this with grammar parser?\nfunction sayKeyword(reply: string){\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\", \"ok\"]\n    let no=[\"no\", \"nope\", \"no thanks\", \"nah\",]\n    let pass=[\"skip\", \"pass\", \"next\",]\n    let hint=[\"hint\", \"clue\", \"help\"]\n    let whatletter=['letter','repeat']\n    let stop=['stop','end the game','shut down']\n    let restart=['restart','start again', 'reboot']\n    let shortcut=['short cut', 'shortcut'] //for testing\n\n    reply=reply.toLowerCase()\n    if(exists(reply, yes)){ return 'yes' }\n    if(exists(reply, no)){ return 'no' }\n    if(exists(reply, pass)){ return 'pass' }\n    if(exists(reply, hint)){ return 'hint' }\n    if(exists(reply, whatletter)){ return 'whatletter' }\n    if(exists(reply, stop)){ return 'stop' }\n    if(exists(reply, restart)){ return 'restart' }\n    if(exists(reply, shortcut)){ return 'shortcut' } //for testing\n}\n\n/*\nNOTES\nSwear words are censored so won't match. Unless change them to f*** in the JSON\n? Find out how to show prompts & recognised text on screen\n? Confetti effect in winning state\n! Need to lemmatize userinput. Use js-lemmatizer, Natural, and/or Wink libraries \n*/\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'start'\n            }\n        },\n        stop: {\n            entry: say(\"Ok bye!\"),\n            on: { ENDSPEECH: {\n                actions: [resetTally,clearLetter,clearTTSAgenda,clearRecResult,confettiOff, gameOff],\n                target:\"init\",\n                } \n            }\n        },\n        //Start new game: initiate new game object & reset tally counter\n        start: {\n            entry: say(\"Starting the game \"),\n            on: { ENDSPEECH: {\n                actions: [newGameRound, gameOn, clearTTSAgenda, clearRecResult],\n                target:\"sayletter\",\n                } \n            } \n        },\n        restart: {\n            entry: say(\"Ok, starting over\"),\n            // always: 'sayletter'\n            on: { ENDSPEECH: {\n                    actions: [newGameRound, gameOn, clearTTSAgenda, clearRecResult],\n                    target:\"sayletter\",\n                    } \n            } \n        },\n        //Say the letter\n        sayletter:{\n            entry: send((context)=>({ type: \"SPEAK\", value: letterNow(context) })),\n            on: {ENDSPEECH:'askQues' }\n        },\n\n        //Ask 5 (or more if skipping) questions \n        askQues: {\n            on: {\n                RECOGNISED: [\n                    \n                    // ? Clear recResult after recognition or not...?\n                    // If answer matches answers, tally+=1, shift question[0]\n                    {cond: (context:SDSContext) => answerMatches(context.recResult, context),\n                     actions: assign((context:SDSContext) => { \n                        context.questions.shift()\n                        return { tally: context.tally+1 } }),\n                     target:\"checkscore\"  },\n                    \n                    //If pass, move the question to the last (unshift & push)\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='pass',\n                     actions: assign((context:SDSContext) => { \n                        let skipped=context.questions.shift();\n                        context.questions.push(skipped);\n                        return { } }),\n                     target:\"checkscore\"  },\n\n                    //Hint 3 or 2 letters\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='hint', target:\"hint\"},\n                    //Repeat letter\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='whatletter', target:\"sayletter\"},\n\n                    //Else    \n                    ...sharedRecognitions(),\n                    \n                ]},\n                ...promptAndAsk( send((context)=>({ type: \"SPEAK\", \n                                                    value: questionNow(context) })) )\n        },\n\n        hint: {\n            entry: send((context)=>({ type: \"SPEAK\", value: giveHint(context) })),\n            always: 'checkscore'\n        },\n        \n        checkscore:{\n            always: [\n                //Less than 5 correct\n                { target: 'askQues', cond: (context) => context.tally<5 },\n\n                //5 correct\n                { target: 'winning', cond: (context) => context.tally>=5 },\n            ]\n        },\n\n                    //? reset/clear tally here or not...? \n        winning: {\n            entry: [ say(\"Winner winner chicken dinner\"), confettiOn, clearTTSAgenda ], \n            on: {ENDSPEECH:{target:'playagain'}}\n        },\n        playagain: {\n            entry: [ clearRecResult, confettiOff, resetTally, clearLetter, gameOff,],\n            on: {\n                RECOGNISED: [\n                     //Play again? restart:stop\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='yes', target:\"restart\"},\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='no', target:\"stop\"},\n\n                    //Else    \n                    ...sharedRecognitions() \n                ]},\n                ...promptAndAsk( say('Want to play again?') )\n        }, \n        \n    },\n\n})","\nimport * as React from \"react\";\n\n//XState library & Game DM-machine\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { dmMachine } from './dmGame';\n\n\n//Animation effects\nimport Confetti from 'react-dom-confetti';\nimport TextLoop from \"react-text-loop\";\nimport { useWindupString, WindupChildren } from \"windups\";\n        // import HeadShake from 'react-reveal/HeadShake';\nconst HeadShake = require('react-reveal/HeadShake'); //?import shows error in TS, so use require() here instead\nconst RubberBand = require('react-reveal/RubberBand');\n\n\n//Browser detection \nimport { isSafari,isChrome, isEdge, isMobile} from \"react-device-detect\";\n\n\n// import { inspect } from \"@xstate/inspect\";\n// inspect({ url:\"https://statecharts.io/inspect\", iframe: false });\n\n\n// State machines: ASR-TTS (voice interface) & dmGame\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine  //dmGame\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;  //==dm context >>access via props.state.context\n}\n//COMPONENT: Big button in the middle, with changing texts\nconst ReactiveButton = (props: Props,): JSX.Element => {\n    const {playingNow} = props.state.context\n    const {ttsAgenda} = props.state.context\n    let speakingText= playingNow? '😼 '+ttsAgenda : '😻 '+ttsAgenda\n    let promptMsg = playingNow? \"...or say Clue, Skip, Restart, Stop \" : \"...say Yes or No\"\n\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\"}} {...props}>\n                    {/* Listening... */}\n\n                    <TextLoop mask={true} interval={5000} springConfig={{ stiffness: 170, damping: 8 }} >\n                        <div><code> {speakingText} </code></div>\n                        <div><code> {promptMsg} </code></div>\n                    </TextLoop>\n\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            \n            const [spokentext] = useWindupString(speakingText); // adds char-by-char animation\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    {/* Speaking... */}\n                    <code>{spokentext}</code>\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    <HeadShake>Play game!</HeadShake>\n                </button >\n            );\n    }\n}\n\n// //MAIN CONTAINER: React webpage elements & VOI\nexport default function App() {\n    \n    //Voice interface events (& console logs)\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {send('ENDSPEECH') },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {send({ type: \"ASRRESULT\", value: result })  },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a voice input.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n            speak: asEffect((context) => {\n\t            console.log('Speaking...');\n                speak({text: context.ttsAgenda })\n            }) \n        }\n    });\n\n    // dmMachine-context / React-states, to display on webpage or turn components on/off\n    const { confettiSwitch } = current.context; //triggers confetti when true\n    const { playingNow } = current.context;\n    const { tally } = current.context;\n    const { recResult } = current.context;\n    const { ttsAgenda } = current.context;\n    const { letter } = current.context;\n    \n    // Config for confetti \n    const confettiConfig = {\n        angle: 90,\n        spread: 360,\n        startVelocity: 80,\n        elementCount: 400,\n        dragFriction: 0.12,\n        duration: 7500,\n        stagger: 1,\n        width: \"7px\",\n        height: \"7px\",\n        perspective: \"210px\",\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n      };\n    \n    let clicked=0;\n    const handleClick = () =>{ \n        if(clicked===0){ console.log(\"clicked\"); send('CLICK'); clicked=1 }\n        else{ console.log(\"unclicked\"); send('UNCLICK'); clicked=0 }\n    }\n\n    //>>>JSX codes & various components\n    \n    // Alt page: Show if not using Chrome or Edge\n    if(!isChrome && !isEdge)\n    return (\n        <div className='OtherBrowsers'>  \n            <HeadShake>\n            <div className='Box'>   \n                <h1>Speech Recognition Not Supported :( </h1>\n                <p>I won't be able to hear you on this browser.</p>\n                <p>Please try Chrome or Edge. :-)</p>\n            </div>\n            </HeadShake>\n        </div>\n      )\n\n    //Show if using Chrome or Edge\n    return (\n        <div className=\"App\">\n                \n                <div className=\"LetterAndHeart\">\n                    <div className=\"GlowLetter\"> <YourLetter letter={letter}/> </div>\n                    <div className=\"Heart\"> \n                        {playingNow? <HeartBar currentScore={tally} maxScore={5} size={50} /> : null }\n                    </div> \n                </div>\n                \n                <Confetti active={ confettiSwitch } config={ confettiConfig }/> \n\n                <RubberBand>\n                    <div className=\"Button\"> \n                        <ReactiveButton state={current} onClick={() => {handleClick()}} /> \n                    </div>\n                </RubberBand>\n\n                <div className=\"Subtitles\"> \n                    <YourSubtitles voiceIn={recResult} tally={tally}/>\n                </div>\n                \n            \n            \n        </div>\n    )\n};\n\n//COMPONENT: Displaying input of voice interface (ie, recResult)\nconst YourSubtitles=(props:any) =>{\n    // Player's speech-- only displays when recResult!=undefined \n\n    //Prefix face changes based on score of the game\n    const  emojis=['😗','🙂','😀','😄','😁','🥳']\n    let emoji=props.tally? emojis[props.tally]:'🙃'\n\n    const subtitlesText = props.voiceIn? emoji+' '+props.voiceIn : ''\n    const [textAnimated] = useWindupString(subtitlesText, {pace: (char) => 3,});\n    return(\n        <div>\n            <span> {textAnimated} </span>\n        </div>\n    )\n}\n\n//COMPONENT: Current score (number & hearts)\n// const Scoreboard=(props:any) =>{\n//     // Shows score and hearts when tally>=1 \n//     const tally = props.tally\n//     // const scoreNum = tally? tally : '' \n//     const hearts = tally? '💛'.repeat(tally) : '' \n//     return(\n//         <div>\n//             {/* <h1>{scoreNum}</h1> */}\n//             <RubberBand>\n//             <h2> {hearts}</h2>\n//             </RubberBand>\n\n//         </div>\n//     )\n// }\n\n//COMPONENT: Capital letter of the game\nconst YourLetter=(props:any) =>{\n    // Shows the letter of the current game round \n    const letter = props.letter\n    return(\n        <div> \n            {letter? letter.toUpperCase():''}\n        </div> \n    )\n}\n\n//COMPONENT: Grey heart to be filled with pink, based on percentage\nconst HeartBar = (props:any) => {\n    \n    const maxScore = props.maxScore\n    const currentScore = props.currentScore>0? props.currentScore : '0'\n    const size = props.size\n    const percentage = currentScore? 100*currentScore/maxScore : 0\n    //add other props? eg, showScore={true/false}; showPercentage={true/false}\n\n\n    const y = 24 - (24 * percentage) / 100; //Height of the pink filling shape\n\n    //Below: Heart-shaped vector graphs & text inside\n    return (\n      <div className=\"ProgressBarH\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n        >\n          <defs>\n            <clipPath id=\"cut-off-bottom\">\n              <rect x=\"0\" y={y} width=\"24\" height=\"24\" />\n            </clipPath>\n          \n            <linearGradient id=\"grey-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#cfccce\" stopOpacity=\"0.75\" />\n                <stop offset=\"60%\" stopColor=\"#bab8ba\" stopOpacity=\"0.85\" />\n                <stop offset=\"100%\" stopColor=\"#949293\" stopOpacity=\"0.9\" />\n            </linearGradient>\n\n            <linearGradient id=\"pink-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#ff33a7\" stopOpacity=\"0.95\" />\n                <stop offset=\"60%\" stopColor=\"#ff2667\" stopOpacity=\"0.95\" />\n                <stop offset=\"100%\" stopColor=\"rgb(255,0,0)\" stopOpacity=\"0.95\" />\n            </linearGradient>\n\n          </defs>\n          \n          <path\n            style={{ fill: \"url(#grey-grad)\" }}\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\n            />\n\n          <path\n            style={{ fill: \"url(#pink-grad)\", }}\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\n            clipPath=\"url(#cut-off-bottom)\"\n            />\n\n          <text textAnchor=\"middle\" x=\"12\" y=\"15\" color=\"white\" fontSize=\"11\" fill=\"white\" opacity=\"0.3\"\n                style={{animation: \"wiggle 2.4s ease-out infinite\", animationDelay:'0.72s'}}>\n            {currentScore} \n          </text>\n\n        </svg>\n      </div>\n    );\n  };\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\n\n//Components\nimport App from \"./App\";\n\n\n//React dom components rendering\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( <App/>, rootElement );\n"],"sourceRoot":""}