{"ast":null,"code":"\"use strict\"; //A JSON object. Can be read from an external .json file\n// const quesJSON = require('./questions.json') //only works on server-end eg Node.js\n// function shuffleArray(array) {\n//     let curId = array.length;\n//     // There remain elements to shuffle\n//     while (0 !== curId) {\n//         // Pick a remaining element\n//         let randId = Math.floor(Math.random() * curId);\n//         curId -= 1;\n//         // Swap it with the current element.\n//         let tmp = array[curId];\n//         array[curId] = array[randId];\n//         array[randId] = tmp;\n//     }\n//     return array;\n// }\n\nfunction getRandomSubarray(arr, size) {\n  var shuffled = arr.slice(0),\n      i = arr.length,\n      temp,\n      index;\n\n  while (i--) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n\n  return shuffled.slice(0, size);\n}\n\nexport function randomChoice(items) {\n  var choice = items[items.length * Math.random() | 0];\n  return choice;\n} //Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \n//each question object has .category & .answers (array of things in that category and begins with the letter)\n\nexport function makeNewQuestions(obj) {\n  var letter;\n  var candidates;\n  var done = false;\n\n  while (done === false) {\n    letter = randomChoice('abcdefghijklmnopqrstvvwxyz');\n    candidates = obj.questions.filter(function (que) {\n      return que.answers.some(function (ans) {\n        return ans[0] === letter;\n      });\n    }); //Need at least 5 ques\n\n    if (candidates.length >= 5) {\n      done = true;\n    }\n  }\n\n  candidates.forEach(function (candidate) {\n    //Filter answer/answers that start with letter\n    candidate.answers = candidate.answers.filter(function (ans) {\n      return ans[0] === letter;\n    });\n  });\n  var ques = getRandomSubarray(candidates, 10); //Random sample; if candidates.length<10, return a shuffled candidates-array\n  //Only return max 10 ques to save memory; \n  //since after 4 corrects, 5 skips are allowed, so the 10th ques must be answered\n\n  return {\n    letter: letter,\n    ques: ques\n  }; //returns an object with 2 properties\n} // let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\n// console.log(q.letter);\n// console.log(q.ques);\n//>>>Below is for testing in the browser (play with text-only)<<<\n// function game() {\n//     let playing = true;\n//     while (playing === true) {\n//         let quesObj = makeNewQuestions(quesJSON);\n//         let letter = quesObj.letter; //A random letter\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\n//         if (tally === 0) {\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\n//         }\n//         while (tally < 5) {\n//             let que = ques[ques.length - 1]; //start from the last \n//             let cat = que.category;\n//             let answers = que.answers;\n//             let userInput = prompt(`Name ${cat}...`);\n//             let reply = userInput.toLowerCase();\n//             if (answers.includes(reply)) {\n//                 alert(\"Correct!\");\n//                 tally += 1;\n//                 ques.pop(); //remove the last\n//             }\n//             else if (reply === 'hint') {\n//                 let anAns = randomChoice(answers);\n//                 //hint 3 letters\n//                 if (anAns.length >= 3) {\n//                     let hint = anAns.slice(0, 3); //first 3 letters\n//                     let rest = '-'.repeat(anAns.slice(3).length);\n//                     alert(hint + rest);\n//                 }\n//                 //in case word is too short>>hint only 1 letter\n//                 else {\n//                     let hint = anAns.slice(0); //first letter\n//                     let rest = '-'.repeat(anAns.slice(1).length);\n//                     alert(hint + rest);\n//                 }\n//             }\n//             else {\n//                 alert('Try again!');\n//             }\n//         }\n//         if (tally >= 5) {\n//             let reply = prompt('Well done! Play again?');\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\n//             if (yesReplies.includes(reply.toLowerCase())) {\n//                 tally = 0;\n//             }\n//             else {\n//                 alert('Ok bye!');\n//                 playing = false;\n//             }\n//         }\n//     }\n// }\n// game()\n// console.log(eligibleQues('z').length)","map":{"version":3,"sources":["/Users/irene/Desktop/ABCgame/src/game_codes/game.js"],"names":["getRandomSubarray","arr","size","shuffled","slice","i","length","temp","index","Math","floor","random","randomChoice","items","choice","makeNewQuestions","obj","letter","candidates","done","questions","filter","que","answers","some","ans","forEach","candidate","ques"],"mappings":"AAAA,a,CAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AAClC,MAAIC,QAAQ,GAAGF,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAf;AAAA,MAA6BC,CAAC,GAAGJ,GAAG,CAACK,MAArC;AAAA,MAA6CC,IAA7C;AAAA,MAAmDC,KAAnD;;AACA,SAAOH,CAAC,EAAR,EAAY;AACRG,IAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACL,CAAC,GAAG,CAAL,IAAUI,IAAI,CAACE,MAAL,EAArB,CAAR;AACAJ,IAAAA,IAAI,GAAGJ,QAAQ,CAACK,KAAD,CAAf;AACAL,IAAAA,QAAQ,CAACK,KAAD,CAAR,GAAkBL,QAAQ,CAACE,CAAD,CAA1B;AACAF,IAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcE,IAAd;AACH;;AACD,SAAOJ,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBF,IAAlB,CAAP;AACH;;AAED,OAAO,SAASU,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,MAAIC,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACP,MAAN,GAAeG,IAAI,CAACE,MAAL,EAAf,GAA+B,CAAhC,CAAlB;AACA,SAAOG,MAAP;AACH,C,CAED;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BC,GAA3B,EAAiC;AACpC,MAAIC,MAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,IAAI,GAAG,KAAX;;AACA,SAAOA,IAAI,KAAK,KAAhB,EAAuB;AACnBF,IAAAA,MAAM,GAAGL,YAAY,CAAC,4BAAD,CAArB;AACAM,IAAAA,UAAU,GAAGF,GAAG,CAACI,SAAJ,CAAcC,MAAd,CAAsB,UAAAC,GAAG;AAAA,aAClCA,GAAG,CAACC,OAAJ,CAAYC,IAAZ,CACI,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAAC,CAAD,CAAH,KAASR,MAAb;AAAA,OADP,CADkC;AAAA,KAAzB,CAAb,CAFmB,CAKnB;;AACA,QAAIC,UAAU,CAACZ,MAAX,IAAqB,CAAzB,EAA4B;AACxBa,MAAAA,IAAI,GAAG,IAAP;AACH;AACJ;;AACDD,EAAAA,UAAU,CAACQ,OAAX,CAAmB,UAAAC,SAAS,EAAI;AAC5B;AACAA,IAAAA,SAAS,CAACJ,OAAV,GAAoBI,SAAS,CAACJ,OAAV,CAAkBF,MAAlB,CAA0B,UAAAI,GAAG;AAAA,aAAIA,GAAG,CAAC,CAAD,CAAH,KAASR,MAAb;AAAA,KAA7B,CAApB;AACH,GAHD;AAIA,MAAIW,IAAI,GAAG5B,iBAAiB,CAACkB,UAAD,EAAa,EAAb,CAA5B,CAlBoC,CAkBU;AAC9C;AACA;;AACA,SAAO;AAACD,IAAAA,MAAM,EAANA,MAAD;AAASW,IAAAA,IAAI,EAAJA;AAAT,GAAP,CArBoC,CAqBb;AAC1B,C,CAKD;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["\"use strict\";\n\n//A JSON object. Can be read from an external .json file\n// const quesJSON = require('./questions.json') //only works on server-end eg Node.js\n\n\n// function shuffleArray(array) {\n//     let curId = array.length;\n//     // There remain elements to shuffle\n//     while (0 !== curId) {\n//         // Pick a remaining element\n//         let randId = Math.floor(Math.random() * curId);\n//         curId -= 1;\n//         // Swap it with the current element.\n//         let tmp = array[curId];\n//         array[curId] = array[randId];\n//         array[randId] = tmp;\n//     }\n//     return array;\n// }\n\nfunction getRandomSubarray(arr, size) {\n    var shuffled = arr.slice(0), i = arr.length, temp, index;\n    while (i--) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(0, size);\n}\n\nexport function randomChoice(items) {\n    let choice = items[items.length * Math.random() | 0];\n    return choice;\n}\n\n//Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \n//each question object has .category & .answers (array of things in that category and begins with the letter)\nexport function makeNewQuestions( obj ) {\n    let letter;\n    let candidates;\n    let done = false;\n    while (done === false) {\n        letter = randomChoice('abcdefghijklmnopqrstvvwxyz');\n        candidates = obj.questions.filter( que => \n            que.answers.some(\n                ans => ans[0]===letter ) );\n        //Need at least 5 ques\n        if (candidates.length >= 5) {\n            done = true;\n        }\n    }\n    candidates.forEach(candidate => {\n        //Filter answer/answers that start with letter\n        candidate.answers = candidate.answers.filter( ans => ans[0]===letter); \n    });\n    let ques = getRandomSubarray(candidates, 10); //Random sample; if candidates.length<10, return a shuffled candidates-array\n    //Only return max 10 ques to save memory; \n    //since after 4 corrects, 5 skips are allowed, so the 10th ques must be answered\n    return {letter, ques}; //returns an object with 2 properties\n}\n\n\n\n\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\n// console.log(q.letter);\n// console.log(q.ques);\n\n\n\n//>>>Below is for testing in the browser (play with text-only)<<<\n\n// function game() {\n//     let playing = true;\n//     while (playing === true) {\n//         let quesObj = makeNewQuestions(quesJSON);\n//         let letter = quesObj.letter; //A random letter\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\n//         if (tally === 0) {\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\n//         }\n//         while (tally < 5) {\n//             let que = ques[ques.length - 1]; //start from the last \n//             let cat = que.category;\n//             let answers = que.answers;\n//             let userInput = prompt(`Name ${cat}...`);\n//             let reply = userInput.toLowerCase();\n//             if (answers.includes(reply)) {\n//                 alert(\"Correct!\");\n//                 tally += 1;\n//                 ques.pop(); //remove the last\n//             }\n//             else if (reply === 'hint') {\n//                 let anAns = randomChoice(answers);\n//                 //hint 3 letters\n//                 if (anAns.length >= 3) {\n//                     let hint = anAns.slice(0, 3); //first 3 letters\n//                     let rest = '-'.repeat(anAns.slice(3).length);\n//                     alert(hint + rest);\n//                 }\n//                 //in case word is too short>>hint only 1 letter\n//                 else {\n//                     let hint = anAns.slice(0); //first letter\n//                     let rest = '-'.repeat(anAns.slice(1).length);\n//                     alert(hint + rest);\n//                 }\n//             }\n//             else {\n//                 alert('Try again!');\n//             }\n//         }\n//         if (tally >= 5) {\n//             let reply = prompt('Well done! Play again?');\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\n//             if (yesReplies.includes(reply.toLowerCase())) {\n//                 tally = 0;\n//             }\n//             else {\n//                 alert('Ok bye!');\n//                 playing = false;\n//             }\n//         }\n//     }\n// }\n\n// game()\n\n// console.log(eligibleQues('z').length)"]},"metadata":{},"sourceType":"module"}