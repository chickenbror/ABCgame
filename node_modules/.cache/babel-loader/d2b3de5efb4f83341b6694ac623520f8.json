{"ast":null,"code":"import _slicedToArray from \"/Users/kycklingbror/Desktop/Github_Repos/ABCgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/kycklingbror/Desktop/Github_Repos/ABCgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/kycklingbror/Desktop/Github_Repos/ABCgame/src/App.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport * as React from \"react\";\nimport { Machine, assign, send } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { dmMachine } from './dmGame'; //Animation effects\n\nimport Confetti from 'react-dom-confetti';\nimport TextLoop from \"react-text-loop\";\nimport { useWindupString } from \"windups\";\nimport HeadShake from 'react-reveal/HeadShake'; // import { inspect } from \"@xstate/inspect\";\n// inspect({ url:\"https://statecharts.io/inspect\", iframe: false });\n// State machines: ASR-TTS (voice interface) & dmGame\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: _objectSpread({}, dmMachine),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign(function (_context, event) {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          initial: 'progress',\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign(function (_context, event) {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            progress: {},\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: function recLogResult(context) {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: function test() {\n      console.log('test');\n    },\n    logIntent: function logIntent(context) {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n}); //COMPONENT: Big button in the middle, with changing texts\n\nvar ReactiveButton = function ReactiveButton(props) {\n  _s();\n\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(TextLoop, {\n          mask: true,\n          interval: 5000,\n          springConfig: {\n            stiffness: 170,\n            damping: 8\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: props.speakingText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 30\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: \"...or say Hint, Pass, Restart, Stop \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 30\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, _this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      var _useWindupString = useWindupString(props.speakingText),\n          _useWindupString2 = _slicedToArray(_useWindupString, 1),\n          spokentext = _useWindupString2[0]; // adds char-by-char animation\n\n\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: spokentext\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, _this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: /*#__PURE__*/_jsxDEV(HeadShake, {\n          children: \"Play game!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, _this)\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, _this);\n  }\n}; // //MAIN CONTAINER: React webpage elements & VOI\n\n\n_s(ReactiveButton, \"S+bNtRj7NBvxoKWW+IAkMKMprO8=\", false, function () {\n  return [useWindupString];\n});\n\n_c = ReactiveButton;\nexport default function App() {\n  _s2();\n\n  //Voice interface events (& console logs)\n  var _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: function onEnd() {\n      send('ENDSPEECH');\n    }\n  }),\n      speak = _useSpeechSynthesis.speak,\n      cancel = _useSpeechSynthesis.cancel,\n      speaking = _useSpeechSynthesis.speaking;\n\n  var _useSpeechRecognition = useSpeechRecognition({\n    onResult: function onResult(result) {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n      listen = _useSpeechRecognition.listen,\n      listening = _useSpeechRecognition.listening,\n      stop = _useSpeechRecognition.stop;\n\n  var _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(function () {\n        console.log('Ready to receive a voice input.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(function () {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      ttsStart: asEffect(function (context, effect) {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect(function (context, effect) {\n        console.log('TTS STOP...');\n        cancel();\n      }),\n      speak: asEffect(function (context) {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      })\n    }\n  }),\n      _useMachine2 = _slicedToArray(_useMachine, 3),\n      current = _useMachine2[0],\n      send = _useMachine2[1],\n      service = _useMachine2[2]; // dmMachine context to display on webpage\n\n\n  var confettiSwitch = current.context.confettiSwitch; //triggers confetti when true\n\n  var scoreChange = current.context.scoreChange;\n  var tally = current.context.tally;\n  var recResult = current.context.recResult;\n  var ttsAgenda = current.context.ttsAgenda;\n  var letter = current.context.letter; // Config for confetti \n\n  var confettiConfig = {\n    angle: 90,\n    spread: 360,\n    startVelocity: 80,\n    elementCount: 400,\n    dragFriction: 0.12,\n    duration: 7500,\n    stagger: 1,\n    width: \"7px\",\n    height: \"7px\",\n    perspective: \"210px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n  var clicked = 0;\n\n  var handleClick = function handleClick() {\n    if (clicked === 0) {\n      console.log(\"clicked\");\n      send('CLICK');\n      clicked = 1;\n    } else {\n      console.log(\"unclicked\");\n      send('UNCLICK');\n      clicked = 0;\n    }\n  }; //JSX codes & various components\n  //TODO: how to position components in desired places??\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Score\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(Scoreboard, {\n        tally: tally\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 41\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Letter\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(YourLetter, {\n        letter: letter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 42\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Button\",\n      children: [/*#__PURE__*/_jsxDEV(ReactiveButton, {\n        speakingText: '😼 ' + ttsAgenda,\n        state: current,\n        onClick: function onClick() {\n          handleClick();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Confetti, {\n        active: confettiSwitch,\n        config: confettiConfig\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Subtitles\",\n      children: [\" \", /*#__PURE__*/_jsxDEV(YourSubtitles, {\n        voiceIn: recResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 45\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n; //COMPONENT: Displaying input of voice interface (ie, recResult)\n\nvar YourSubtitles = function YourSubtitles(props) {\n  _s3();\n\n  // Player's speech-- only displays when recResult!=undefined \n  var subtitlesText = props.voiceIn ? '😅 ' + props.voiceIn : '';\n\n  var _useWindupString3 = useWindupString(subtitlesText, {\n    pace: function pace(char) {\n      return 3;\n    }\n  }),\n      _useWindupString4 = _slicedToArray(_useWindupString3, 1),\n      textAnimated = _useWindupString4[0];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", textAnimated, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 9\n  }, _this);\n}; //COMPONENT: Current score (number & hearts)\n\n\n_s3(YourSubtitles, \"T1TGb1P+O1NhR2xfEfH+NroZm/E=\", false, function () {\n  return [useWindupString];\n});\n\n_c3 = YourSubtitles;\n\nvar Scoreboard = function Scoreboard(props) {\n  // Shows score and hearts when tally>=1 \n  var tally = props.tally;\n  var scoreNum = tally ? tally : '';\n  var hearts = tally ? '💛'.repeat(tally) : '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: scoreNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", hearts]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 9\n  }, _this);\n}; //COMPONENT: Capital letter of the game\n\n\n_c4 = Scoreboard;\n\nvar YourLetter = function YourLetter(props) {\n  // Shows the letter of the current game round \n  var letter = props.letter;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(HeadShake, {\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: letter ? letter.toUpperCase() : ''\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 21\n      }, _this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 9\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, _this);\n}; // func = Element(props.Parameter) >> jsx tag = <Element Parameter={ pass value here }/>\n// function Myelement(props){\n//     return(\n//         <div>\n//             haha i can pass {props.something} which replaces the placeholder here\n//         </div>\n//     )\n// }\n\n\n_c5 = YourLetter;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"YourSubtitles\");\n$RefreshReg$(_c4, \"Scoreboard\");\n$RefreshReg$(_c5, \"YourLetter\");","map":{"version":3,"sources":["/Users/kycklingbror/Desktop/Github_Repos/ABCgame/src/App.tsx"],"names":["React","Machine","assign","send","useMachine","asEffect","dmMachine","Confetti","TextLoop","useWindupString","HeadShake","useSpeechSynthesis","useSpeechRecognition","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","actions","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","RECOGNISED","progress","match","speaking","ENDSPEECH","recLogResult","context","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","stiffness","damping","speakingText","spokentext","App","onEnd","speak","cancel","onResult","result","listen","listening","stop","devTools","recStart","interimResults","continuous","recStop","ttsStart","effect","text","ttsCancel","current","service","confettiSwitch","scoreChange","tally","letter","confettiConfig","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","clicked","handleClick","YourSubtitles","subtitlesText","voiceIn","pace","char","textAnimated","Scoreboard","scoreNum","hearts","repeat","YourLetter","toUpperCase"],"mappings":"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","sourcesContent":["\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\n\nimport { dmMachine } from './dmGame';\n\n\n//Animation effects\nimport Confetti from 'react-dom-confetti';\nimport TextLoop from \"react-text-loop\";\nimport { useWindupString, WindupChildren } from \"windups\";\nimport Flip from 'react-reveal/Flip';\nimport HeadShake from 'react-reveal/HeadShake';\n\n\n\n// import { inspect } from \"@xstate/inspect\";\n// inspect({ url:\"https://statecharts.io/inspect\", iframe: false });\n\n\n// State machines: ASR-TTS (voice interface) & dmGame\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine  //dmGame\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n//COMPONENT: Big button in the middle, with changing texts\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n    speakingText:string; //Display of ttsAgenda value\n}\nconst ReactiveButton = (props: Props,): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\"}} {...props}>\n                    {/* Listening... */}\n\n                    <TextLoop mask={true} interval={5000} springConfig={{ stiffness: 170, damping: 8 }} >\n                        <div><code>{props.speakingText}</code></div>\n                        <div><code>...or say Hint, Pass, Restart, Stop </code></div>\n                    </TextLoop>\n\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            const [spokentext] = useWindupString(props.speakingText); // adds char-by-char animation\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    {/* Speaking... */}\n                    <code>{spokentext}</code>\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    <HeadShake>Play game!</HeadShake>\n                </button >\n            );\n    }\n}\n\n// //MAIN CONTAINER: React webpage elements & VOI\nexport default function App() {\n    \n    //Voice interface events (& console logs)\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {send('ENDSPEECH') },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {send({ type: \"ASRRESULT\", value: result })  },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a voice input.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n            speak: asEffect((context) => {\n\t            console.log('Speaking...');\n                speak({text: context.ttsAgenda })\n            }) \n        }\n    });\n\n    // dmMachine context to display on webpage\n    const { confettiSwitch } = current.context; //triggers confetti when true\n    const { scoreChange } = current.context;\n    const { tally } = current.context;\n    const { recResult } = current.context;\n    const { ttsAgenda } = current.context;\n    const { letter } = current.context;\n    \n    // Config for confetti \n    const confettiConfig = {\n        angle: 90,\n        spread: 360,\n        startVelocity: 80,\n        elementCount: 400,\n        dragFriction: 0.12,\n        duration: 7500,\n        stagger: 1,\n        width: \"7px\",\n        height: \"7px\",\n        perspective: \"210px\",\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n      };\n    \n    let clicked=0;\n    const handleClick = () =>{ \n        if(clicked===0){\n            console.log(\"clicked\")\n            send('CLICK')\n            clicked=1\n        }else{\n            console.log(\"unclicked\")\n            send('UNCLICK')\n            clicked=0\n        }\n    }\n\n    //JSX codes & various components\n    //TODO: how to position components in desired places??\n    return (\n        <div className=\"App\">\n            \n\n                <div className=\"Score\"> <Scoreboard tally={tally}/> </div>\n\n                <div className=\"Letter\"> <YourLetter letter={letter}/> </div>\n\n                <div className=\"Button\"> \n                    <ReactiveButton speakingText={'😼 '+ttsAgenda} \n                    state={current} onClick={() => {handleClick()}} /> \n                    <Confetti active={ confettiSwitch } config={ confettiConfig }/> \n                </div>\n                \n                <div className=\"Subtitles\"> <YourSubtitles voiceIn={recResult}/> </div>\n            \n            \n        </div>\n    )\n};\n\n//COMPONENT: Displaying input of voice interface (ie, recResult)\nconst YourSubtitles=(props:any) =>{\n\n    // Player's speech-- only displays when recResult!=undefined \n    const subtitlesText = props.voiceIn? '😅 '+props.voiceIn : ''\n    const [textAnimated] = useWindupString(subtitlesText, {pace: (char) => 3,\n      });\n    return(\n        <div>\n            <span> {textAnimated} </span>\n        </div>\n    )\n}\n//COMPONENT: Current score (number & hearts)\nconst Scoreboard=(props:any) =>{\n    // Shows score and hearts when tally>=1 \n    const tally = props.tally\n    const scoreNum = tally? tally : '' \n    const hearts = tally? '💛'.repeat(tally) : '' \n    return(\n        <div>\n        \n            <h1>{scoreNum}</h1>\n        \n            <h2> {hearts}</h2>\n\n        </div>\n    )\n}\n\n//COMPONENT: Capital letter of the game\nconst YourLetter=(props:any) =>{\n    // Shows the letter of the current game round \n    const letter = props.letter\n    return(\n        <div>\n        <HeadShake> <h1>{letter? letter.toUpperCase():''}</h1> </HeadShake>\n        </div>\n        \n    )\n}\n\n// func = Element(props.Parameter) >> jsx tag = <Element Parameter={ pass value here }/>\n// function Myelement(props){\n//     return(\n//         <div>\n//             haha i can pass {props.something} which replaces the placeholder here\n//         </div>\n//     )\n// }\n\n"]},"metadata":{},"sourceType":"module"}