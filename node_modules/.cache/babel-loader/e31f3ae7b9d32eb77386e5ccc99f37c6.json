{"ast":null,"code":"import _toConsumableArray from\"/Users/irene/Desktop/ABCgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/irene/Desktop/ABCgame/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{assign,send}from\"xstate\";//Instantiate a new obj for each new round of game\nimport{makeNewQuestions,randomChoice}from'./game_codes/game';var quesJSON=require('./game_codes/questions.json');//Source of game questions; require() only works on server\n// let qs=makeNewQuestions(quesJSON)\n// console.log(qs.letter)\n// console.log(qs.ques)\n//Using \"Natural\" NLP library\nvar natural=require('natural'),nounInflector=new natural.NounInflector();// let singular = nounInflector.singularize('those tomatoes');\n// console.log(singular); //>>those tomato\n//Add context.skips, context.hintsGiven & guard states??\nvar clearRecResult=assign(function(context){return{recResult:''};});var clearTTSAgenda=assign(function(context){return{ttsAgenda:''};});var resetTally=assign(function(context){return{tally:0};});var clearLetter=assign(function(context){return{letter:undefined};});var confettiOn=assign(function(context){return{confettiSwitch:true};});var confettiOff=assign(function(context){return{confettiSwitch:false};});var gameOn=assign(function(context){return{playingNow:true};});var gameOff=assign(function(context){return{playingNow:false};});//Initiate a questions object & assign values to context.letter/questions/tally\nvar newGameRound=assign(function(context){var qs=makeNewQuestions(quesJSON);console.log(\"Last round:\".concat(context.lastLetter));console.log(qs.ques);return{letter:qs.letter,questions:qs.ques,tally:0,skipped:0,hinted:0,confettiSwitch:false};});//After chosen a letter and before going saying it, remember it for referece of next game round\nvar rememberLetter=assign(function(context){return{lastLetter:context.letter};});// const remember3Letters: Action<SDSContext, SDSEvent> = assign((context) => { \n//     let last3Letters= context.lastLetters? context.lastLetters : []\n//     last3Letters.push(context.letter)\n//     if(last3Letters.length>3){\n//         last3Letters.shift()\n//     }\n//     return { lastLetters: last3Letters} \n// })\n//Say the current random letter and a 'spelling/phonetic' alphabet\nfunction letterNow(context){var alphabet={'a':'Adam','b':'Bella','c':'Cindy','d':'Daniel','e':'Emma','f':'Frida','g':'Gabriel','h':'Hannah','i':'Ida','j':'Jennifer','k':'Kevin','l':'Laura','m':'Michael','n':'Nicole','o':'Oscar','p':'Paula','q':'Quebec','r':'Rachel','s':'Sophia','t':'Tina','u':'unique','v':'Victoria','w':'William','x':'x-ray','y':'Yasmin','z':'Zara'};var letter=context.letter;return\"Your letter is \\\"\".concat(letter.toUpperCase(),\"\\\" for \\\"\").concat(alphabet[letter],\"\\\". \");}function questionNow(context){var category=context.questions[0].category;//the question at front of array\nreturn\"Name \".concat(category,\". \");}function giveHint(context){var answers=context.questions[0].answers;//answers to the question at front of array\nvar anAns=randomChoice(answers);if(anAns.length>=3){var hint=anAns.slice(0,3).toUpperCase();//first 3 letters\nreturn\"Spelled with \".concat(hint[0],\", \").concat(hint[1],\", \").concat(hint[2],\".\");}//in case word is too short>>hint only 2 letters\nelse{var _hint=anAns.slice(0,2).toUpperCase();//first 2 letters\nreturn\"Spelled with \".concat(_hint[0],\", \").concat(_hint[1],\".\");}}//Partial match of user input, as long as input mentions an answer\nfunction answerMatches(input,context){var reply=input.toLowerCase();//convert to lowercase\nvar replySing=nounInflector.singularize(reply);//convert to singular form\nvar answers=context.questions[0].answers;//answers to the question at front of array\n//True if reply--either original or singularised--mentions an answer \n//(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\nreturn exists(reply,answers)||exists(replySing,answers);}function say(text){return send(function(_context){return{type:\"SPEAK\",value:text};});}function sharedRecognitions(){return[{target:'stop',cond:function cond(context){return sayKeyword(context.recResult)==='stop';}},{target:'restart',cond:function cond(context){return sayKeyword(context.recResult)==='restart';}},//for testing \n{target:'winning',cond:function cond(context){return sayKeyword(context.recResult)==='shortcut';}},{target:\".nomatch\"}];}function promptAndAsk(promptEvent){return{initial:'prompt',states:{prompt:{entry:promptEvent,on:{ENDSPEECH:'ask'}},ask:{entry:send('LISTEN')},nomatch:{entry:[say(\"Try again\")],on:{ENDSPEECH:\"prompt\"}}}};}// Similar to python: any(keyword in input for keyword in keywords)\nfunction exists(input,keywords){var existence=keywords.some(function(keyword){return input.includes(keyword);});return existence;}//Replace this with grammar parser?\nfunction sayKeyword(reply){var yes=[\"yes\",\"of course\",\"sure\",\"absolutely\",\"yeah\",\"yep\",\"okay\",\"ok\"];var no=[\"no\",\"nope\",\"no thanks\",\"nah\"];var pass=[\"skip\",\"pass\",\"next\"];var hint=[\"hint\",\"clue\",\"help\"];var whatletter=['letter','repeat'];var stop=['stop','end the game','shut down'];var restart=['restart','start again','reboot'];var shortcut=['short cut','shortcut'];//for testing\nreply=reply.toLowerCase();if(exists(reply,yes)){return'yes';}if(exists(reply,no)){return'no';}if(exists(reply,pass)){return'pass';}if(exists(reply,hint)){return'hint';}if(exists(reply,whatletter)){return'whatletter';}if(exists(reply,stop)){return'stop';}if(exists(reply,restart)){return'restart';}if(exists(reply,shortcut)){return'shortcut';}//for testing\n}export var dmMachine={initial:'init',states:{init:{on:{CLICK:'start'}},stop:{entry:say(\"Ok bye!\"),on:{ENDSPEECH:{actions:[resetTally,clearLetter,clearTTSAgenda,clearRecResult,confettiOff,gameOff],target:\"init\"}}},//Start/restart new game: initiate new questions-object & reset tally counter\nstart:{entry:say(\"Starting the game \"),on:{ENDSPEECH:{target:\"chooseNewLetter\"}}},restart:{entry:say(\"Ok, starting over\"),on:{ENDSPEECH:{target:\"chooseNewLetter\"}}},chooseNewLetter:{always:[{actions:[newGameRound,clearTTSAgenda,clearRecResult],target:\"checkLastLetter\"}]},//After choosing letter, comparing to last letter game so that the new letter is not repeated\ncheckLastLetter:{always:[//if chosen letter is the same as last ones >> choose again\n{cond:function cond(context){return!!context.lastLetter&&context.letter===context.lastLetter;},target:'chooseNewLetter'},//chosen letter is different from last 3 letters >> remember it & resume game\n{actions:[rememberLetter,gameOn],target:'sayletter'}]},//Starting the game for real from this state\n//Say the letter\nsayletter:{entry:send(function(context){return{type:\"SPEAK\",value:letterNow(context)};}),on:{ENDSPEECH:'askQues'}},//Ask 5 (or more if skipping) questions \naskQues:_objectSpread({on:{RECOGNISED:[// ? Clear recResult after recognition or not...?\n// If answer matches answers, tally+=1, shift question[0]\n{cond:function cond(context){return answerMatches(context.recResult,context);},actions:assign(function(context){context.questions.shift();return{tally:context.tally+1};}),target:\"checkscore\"},//If pass, move the question to the last (unshift & push)\n{cond:function cond(context){return sayKeyword(context.recResult)==='pass';},target:\"skip\"},//Hint 3 or 2 letters\n{cond:function cond(context){return sayKeyword(context.recResult)==='hint';},target:\"hint\"},//Repeat letter\n{cond:function cond(context){return sayKeyword(context.recResult)==='whatletter';},target:\"sayletter\"}].concat(_toConsumableArray(sharedRecognitions()))}},promptAndAsk(send(function(context){return{type:\"SPEAK\",value:questionNow(context)};}))),skip:{initial:'checkSkipped',states:{checkSkipped:{always:[{target:'letSkip',cond:function cond(context){return context.skipped<5;}},{target:'maxSkipped',cond:function cond(context){return context.skipped>=5;}}]},//move the question to the last (unshift & push); context.skipped++\nletSkip:{entry:assign(function(context){var skipped=context.questions.shift();context.questions.push(skipped);console.log(\"Skipped so far: \".concat(context.skipped+1,\" \"));console.log(context.questions);return{skipped:context.skipped+1};}),always:'#checkscore'},maxSkipped:{entry:say(\"Oops, you've skipped for too many times!\"),on:{ENDSPEECH:{target:'#checkscore'}}}}},hint:{initial:'checkHinted',states:{checkHinted:{always:[{target:'giveHint',cond:function cond(context){return context.hinted<5;}},{target:'maxHinted',cond:function cond(context){return context.hinted>=5;}}]},//Hint 3 or 2 letters or a random answer; context.hinted++\ngiveHint:{entry:[send(function(context){return{type:\"SPEAK\",value:giveHint(context)};}),assign(function(context){console.log(\"Hinted so far: \".concat(context.hinted+1,\" \"));return{hinted:context.hinted+1};})],always:'#checkscore'// use 'on endspeech...' if we want the question being said again\n},maxHinted:{entry:say(\"Oops, you've asked for too many hints!\"),on:{ENDSPEECH:{target:'#checkscore'}}}}},checkscore:{id:\"checkscore\",always:[//Less than 5 correct\n{target:'askQues',cond:function cond(context){return context.tally<5;}},//5 correct\n{target:'winning',cond:function cond(context){return context.tally>=5;}}]},//? reset/clear tally here or not...? \nwinning:{entry:[say(\"Winner winner chicken dinner\"),confettiOn,clearTTSAgenda],on:{ENDSPEECH:{target:'playagain'}}},playagain:_objectSpread({entry:[clearRecResult,confettiOff,resetTally,clearLetter,gameOff],on:{RECOGNISED:[//Play again? restart:stop\n{cond:function cond(context){return sayKeyword(context.recResult)==='yes';},target:\"restart\"},{cond:function cond(context){return sayKeyword(context.recResult)==='no';},target:\"stop\"}].concat(_toConsumableArray(sharedRecognitions()))}},promptAndAsk(say('Want to play again?')))}};","map":{"version":3,"sources":["/Users/irene/Desktop/ABCgame/src/dmGame.ts"],"names":["assign","send","makeNewQuestions","randomChoice","quesJSON","require","natural","nounInflector","NounInflector","clearRecResult","context","recResult","clearTTSAgenda","ttsAgenda","resetTally","tally","clearLetter","letter","undefined","confettiOn","confettiSwitch","confettiOff","gameOn","playingNow","gameOff","newGameRound","qs","console","log","lastLetter","ques","questions","skipped","hinted","rememberLetter","letterNow","alphabet","toUpperCase","questionNow","category","giveHint","answers","anAns","length","hint","slice","answerMatches","input","reply","toLowerCase","replySing","singularize","exists","say","text","_context","type","value","sharedRecognitions","target","cond","sayKeyword","promptAndAsk","promptEvent","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","keywords","existence","some","keyword","includes","yes","no","pass","whatletter","stop","restart","shortcut","dmMachine","init","CLICK","actions","start","chooseNewLetter","always","checkLastLetter","sayletter","askQues","RECOGNISED","shift","skip","checkSkipped","letSkip","push","maxSkipped","checkHinted","maxHinted","checkscore","id","winning","playagain"],"mappings":"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","sourcesContent":["import { MachineConfig, actions, Action, assign, send } from \"xstate\";\n\n//Instantiate a new obj for each new round of game\nimport { makeNewQuestions, randomChoice } from './game_codes/game'\nconst quesJSON = require('./game_codes/questions.json') //Source of game questions; require() only works on server\n// let qs=makeNewQuestions(quesJSON)\n// console.log(qs.letter)\n// console.log(qs.ques)\n\n//Using \"Natural\" NLP library\nconst natural = require('natural'),\nnounInflector = new natural.NounInflector();\n// let singular = nounInflector.singularize('those tomatoes');\n// console.log(singular); //>>those tomato\n\n\n\n//Add context.skips, context.hintsGiven & guard states??\n\n\nconst clearRecResult: Action<SDSContext, SDSEvent> = assign((context) => { return { recResult:''} })\nconst clearTTSAgenda: Action<SDSContext, SDSEvent> = assign((context) => { return { ttsAgenda:''} })\nconst resetTally: Action<SDSContext, SDSEvent> = assign((context) => { return { tally:0} })\nconst clearLetter: Action<SDSContext, SDSEvent> = assign((context) => { return { letter:undefined} })\n\nconst confettiOn: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:true} })\nconst confettiOff: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:false} })\n\nconst gameOn: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:true} })\nconst gameOff: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:false} })\n\n//Initiate a questions object & assign values to context.letter/questions/tally\nconst newGameRound: Action<SDSContext, SDSEvent> = assign((context) => { \n    let qs=makeNewQuestions( quesJSON );\n    console.log(`Last round:${context.lastLetter}`)\n    console.log(qs.ques)\n    return { letter: qs.letter, questions: qs.ques, tally:0, skipped:0, hinted:0, confettiSwitch:false} \n})\n//After chosen a letter and before going saying it, remember it for referece of next game round\nconst rememberLetter: Action<SDSContext, SDSEvent> = assign((context) => { \n    return { lastLetter: context.letter} \n})\n// const remember3Letters: Action<SDSContext, SDSEvent> = assign((context) => { \n//     let last3Letters= context.lastLetters? context.lastLetters : []\n//     last3Letters.push(context.letter)\n//     if(last3Letters.length>3){\n//         last3Letters.shift()\n//     }\n//     return { lastLetters: last3Letters} \n// })\n\n\n//Say the current random letter and a 'spelling/phonetic' alphabet\nfunction letterNow(context:SDSContext){\n    const alphabet:any = {\n        'a':'Adam', 'b':'Bella', 'c':'Cindy', 'd':'Daniel', 'e':'Emma', 'f':'Frida', 'g':'Gabriel', 'h':'Hannah',\n        'i':'Ida', 'j':'Jennifer', 'k':'Kevin', 'l':'Laura', 'm':'Michael', 'n':'Nicole', 'o':'Oscar', 'p':'Paula',\n        'q':'Quebec', 'r':'Rachel', 's':'Sophia', 't':'Tina', 'u':'unique', 'v':'Victoria', 'w':'William', 'x':'x-ray',\n        'y':'Yasmin', 'z':'Zara'\n        }\n    let letter:string = context.letter\n    return `Your letter is \"${letter.toUpperCase()}\" for \"${alphabet[letter]}\". `\n}\n\nfunction questionNow(context:SDSContext){\n    let category = context.questions[0].category //the question at front of array\n    return `Name ${category}. `\n}\n\nfunction giveHint(context:SDSContext){\n    let answers = context.questions[0].answers //answers to the question at front of array\n    let anAns = randomChoice(answers)\n    if (anAns.length >= 3) {\n        let hint = anAns.slice(0, 3).toUpperCase() //first 3 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\n    }\n    //in case word is too short>>hint only 2 letters\n    else {\n        let hint = anAns.slice(0, 2).toUpperCase() //first 2 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}.`\n    }\n}\n\n//Partial match of user input, as long as input mentions an answer\nfunction answerMatches(input:string,context:SDSContext){\n    let reply = input.toLowerCase() //convert to lowercase\n    let replySing = nounInflector.singularize( reply ) //convert to singular form\n\n    let answers = context.questions[0].answers //answers to the question at front of array\n\n    //True if reply--either original or singularised--mentions an answer \n    //(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\n    return  (exists(reply, answers) || exists(replySing, answers)) \n}\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction sharedRecognitions() {\n    return [\n        { target: 'stop', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'stop' },\n        { target: 'restart', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'restart' },\n        //for testing \n        { target: 'winning', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'shortcut' },\n        { target: \".nomatch\" }\n        ]\n}\n\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: promptEvent,\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            nomatch: { entry: [say(\"Try again\")],  \n                       on: { ENDSPEECH: \"prompt\" } \n            },\n        }\n    })\n}\n\n\n// Similar to python: any(keyword in input for keyword in keywords)\nfunction exists(input:string, keywords:string[]){\n    let existence = keywords.some(keyword => input.includes(keyword))\n    return existence\n}\n//Replace this with grammar parser?\nfunction sayKeyword(reply: string){\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\", \"ok\"]\n    let no=[\"no\", \"nope\", \"no thanks\", \"nah\",]\n    let pass=[\"skip\", \"pass\", \"next\",]\n    let hint=[\"hint\", \"clue\", \"help\"]\n    let whatletter=['letter','repeat']\n    let stop=['stop','end the game','shut down']\n    let restart=['restart','start again', 'reboot']\n    let shortcut=['short cut', 'shortcut'] //for testing\n\n    reply=reply.toLowerCase()\n    if(exists(reply, yes)){ return 'yes' }\n    if(exists(reply, no)){ return 'no' }\n    if(exists(reply, pass)){ return 'pass' }\n    if(exists(reply, hint)){ return 'hint' }\n    if(exists(reply, whatletter)){ return 'whatletter' }\n    if(exists(reply, stop)){ return 'stop' }\n    if(exists(reply, restart)){ return 'restart' }\n    if(exists(reply, shortcut)){ return 'shortcut' } //for testing\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'start'\n            }\n        },\n        stop: {\n            entry: say(\"Ok bye!\"),\n            on: { ENDSPEECH: {\n                actions: [resetTally,clearLetter,clearTTSAgenda,clearRecResult,confettiOff, gameOff],\n                target:\"init\",\n                } \n            }\n        },\n        //Start/restart new game: initiate new questions-object & reset tally counter\n        start: {\n            entry: say(\"Starting the game \"),\n            on: { ENDSPEECH: { target:\"chooseNewLetter\" } } \n        },\n        restart: {\n            entry: say(\"Ok, starting over\"),\n            on: { ENDSPEECH: {target:\"chooseNewLetter\" } } \n        },\n        chooseNewLetter :{\n            always:[\n                {actions: [newGameRound, clearTTSAgenda, clearRecResult],\n                 target: \"checkLastLetter\" }\n            ]\n        },\n\n        //After choosing letter, comparing to last letter game so that the new letter is not repeated\n        checkLastLetter: {\n            always: [\n                //if chosen letter is the same as last ones >> choose again\n                { cond: (context) => !!context.lastLetter && context.letter===context.lastLetter, \n                    target: 'chooseNewLetter', },\n\n                //chosen letter is different from last 3 letters >> remember it & resume game\n                { \n                  actions: [rememberLetter, gameOn, ],\n                  target: 'sayletter',  },\n            ]\n        },\n\n        //Starting the game for real from this state\n        //Say the letter\n        sayletter:{\n            entry: send((context)=>({ type: \"SPEAK\", value: letterNow(context) })),\n            on: {ENDSPEECH:'askQues' }\n        },\n\n        //Ask 5 (or more if skipping) questions \n        askQues: {\n            on: {\n                RECOGNISED: [\n                    \n                    // ? Clear recResult after recognition or not...?\n                    // If answer matches answers, tally+=1, shift question[0]\n                    {cond: (context:SDSContext) => answerMatches(context.recResult, context),\n                     actions: assign((context:SDSContext) => { \n                        context.questions.shift()\n                        return { tally: context.tally+1 } }),\n                     target:\"checkscore\"  },\n                    \n                    //If pass, move the question to the last (unshift & push)\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='pass', target:\"skip\"  },\n\n                    //Hint 3 or 2 letters\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='hint', target:\"hint\"},\n\n                    //Repeat letter\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='whatletter', target:\"sayletter\"},\n\n                    //Else    \n                    ...sharedRecognitions(),\n                    \n                ]},\n                ...promptAndAsk( send((context)=>({ type: \"SPEAK\", \n                                                    value: questionNow(context) })) )\n        },\n\n        skip: {\n            initial: 'checkSkipped',\n            states:{\n                checkSkipped:{\n                    always:[\n                        { target: 'letSkip', cond: (context) => context.skipped<5 },\n                        { target: 'maxSkipped', cond: (context) => context.skipped>=5 },\n                    ]\n                },\n                //move the question to the last (unshift & push); context.skipped++\n                letSkip:{\n                    entry:  assign((context:SDSContext) => { \n                        let skipped=context.questions.shift();\n                        context.questions.push(skipped);\n                        console.log(`Skipped so far: ${context.skipped+1} `)\n                        console.log(context.questions)\n                        return { skipped:context.skipped+1} }),\n                    always: '#checkscore'\n                },\n                maxSkipped:{\n                    entry: say(`Oops, you've skipped for too many times!`),\n                    on:{ ENDSPEECH: {target:'#checkscore'}}\n                }\n            }\n        },\n\n        hint: {\n            initial: 'checkHinted',\n            states:{\n                checkHinted:{\n                    always:[\n                        { target: 'giveHint', cond: (context) => context.hinted<5 },\n                        { target: 'maxHinted', cond: (context) => context.hinted>=5 },\n                    ]\n                },\n                //Hint 3 or 2 letters or a random answer; context.hinted++\n                giveHint:{\n                    entry: [\n                        send((context)=>({ type: \"SPEAK\", value: giveHint(context) })),\n                        assign((context:SDSContext) => {\n                            console.log(`Hinted so far: ${context.hinted+1} `);\n                            return { hinted:context.hinted+1} })\n                    ],\n                    always: '#checkscore' // use 'on endspeech...' if we want the question being said again\n                },\n                maxHinted:{\n                    entry: say(`Oops, you've asked for too many hints!`),\n                    on:{ ENDSPEECH: {target:'#checkscore'}}\n                }\n            }\n        },\n        \n        checkscore:{\n            id:\"checkscore\",\n            always: [\n                //Less than 5 correct\n                { target: 'askQues', cond: (context) => context.tally<5 },\n\n                //5 correct\n                { target: 'winning', cond: (context) => context.tally>=5 },\n            ]\n        },\n\n                    //? reset/clear tally here or not...? \n        winning: {\n            entry: [ say(\"Winner winner chicken dinner\"), confettiOn, clearTTSAgenda ], \n            on: {ENDSPEECH:{target:'playagain'}}\n        },\n        playagain: {\n            entry: [ clearRecResult, confettiOff, resetTally, clearLetter, gameOff,],\n            on: {\n                RECOGNISED: [\n                     //Play again? restart:stop\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='yes', target:\"restart\"},\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='no', target:\"stop\"},\n\n                    //Else    \n                    ...sharedRecognitions() \n                ]},\n                ...promptAndAsk( say('Want to play again?') )\n        }, \n        \n    },\n\n})"]},"metadata":{},"sourceType":"module"}