{"version":3,"sources":["game_codes/game.js","dmGame.ts","App.tsx","index.tsx"],"names":["randomChoice","items","length","Math","random","makeNewQuestions","obj","letter","candidates","done","questions","filter","que","answers","some","ans","forEach","candidate","ques","arr","size","temp","index","shuffled","slice","i","floor","getRandomSubarray","quesJSON","require","nounInflector","NounInflector","clearRecResult","assign","context","recResult","clearTTSAgenda","ttsAgenda","resetTally","tally","clearLetter","undefined","confettiOn","confettiSwitch","confettiOff","gameOn","playingNow","gameOff","newGameRound","qs","console","log","lastLetter","skipped","hinted","rememberLetter","letterNow","toUpperCase","questionNow","category","giveHint","anAns","hint","say","text","send","_context","type","value","sharedRecognitions","target","cond","sayKeyword","promptAndAsk","promptEvent","initial","states","prompt","entry","on","ENDSPEECH","ask","nomatch","exists","input","keywords","keyword","includes","reply","toLowerCase","dmMachine","init","CLICK","stop","actions","start","restart","chooseNewLetter","always","checkLastLetter","sayletter","askQues","RECOGNISED","replySing","singularize","answerMatches","shift","skip","checkSkipped","letSkip","push","maxSkipped","checkHinted","maxHinted","checkscore","id","winning","playagain","HeadShake","RubberBand","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","intent","name","ReactiveButton","props","promptInGame","state","speakingText","promptMsg","matches","className","style","animation","mask","interval","springConfig","stiffness","damping","useWindupString","spokentext","App","useSpeechSynthesis","onEnd","speak","cancel","voices","useSpeechRecognition","onResult","result","listen","listening","React","useMachine","devTools","recStart","asEffect","interimResults","continuous","lang","recStop","ttsStart","effect","ttsCancel","current","clicked","isChrome","isEdge","currentScore","maxScore","active","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","onClick","YourSubtitles","subtitlesText","emoji","textAnimated","UserSubtitles","showing","YourLetter","HeartBar","y","xmlns","viewBox","x","x1","y1","x2","y2","offset","stopColor","stopOpacity","fill","d","clipPath","textAnchor","color","fontSize","opacity","animationDelay","PopoverButtons","content","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.11549341.chunk.js","sourcesContent":["\"use strict\";\n\n//A JSON object. Can be read from an external .json file\n// const quesJSON = require('./questions.json') //only works on server-end eg Node.js\n\n\n// function shuffleArray(array) {\n//     let curId = array.length;\n//     // There remain elements to shuffle\n//     while (0 !== curId) {\n//         // Pick a remaining element\n//         let randId = Math.floor(Math.random() * curId);\n//         curId -= 1;\n//         // Swap it with the current element.\n//         let tmp = array[curId];\n//         array[curId] = array[randId];\n//         array[randId] = tmp;\n//     }\n//     return array;\n// }\n\nfunction getRandomSubarray(arr, size) {\n    var shuffled = arr.slice(0), i = arr.length, temp, index;\n    while (i--) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(0, size);\n}\n\nexport function randomChoice(items) {\n    let choice = items[items.length * Math.random() | 0];\n    return choice;\n}\n\n//Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \n//each question object has .category & .answers (array of things in that category and begins with the letter)\nexport function makeNewQuestions( obj ) {\n    let letter;\n    let candidates;\n    let done = false;\n    while (done === false) {\n        letter = randomChoice('abcdefghijklmnopqrstvvwxyz');\n        candidates = obj.questions.filter( que => \n            que.answers.some(\n                ans => ans[0]===letter ) );\n        //Need at least 5 ques\n        if (candidates.length >= 5) {\n            done = true;\n        }\n    }\n    candidates.forEach(candidate => {\n        //Filter answer/answers that start with letter\n        candidate.answers = candidate.answers.filter( ans => ans[0]===letter); \n    });\n    let ques = getRandomSubarray(candidates, 10); //Random sample; if candidates.length<10, return a shuffled candidates-array\n    //Only return max 10 ques to save memory; \n    //since after 4 corrects, 5 skips are allowed, so the 10th ques must be answered\n    return {letter, ques}; //returns an object with 2 properties\n}\n\n\n\n\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\n// console.log(q.letter);\n// console.log(q.ques);\n\n\n\n//>>>Below is for testing in the browser (play with text-only)<<<\n\n// function game() {\n//     let playing = true;\n//     while (playing === true) {\n//         let quesObj = makeNewQuestions(quesJSON);\n//         let letter = quesObj.letter; //A random letter\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\n//         if (tally === 0) {\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\n//         }\n//         while (tally < 5) {\n//             let que = ques[ques.length - 1]; //start from the last \n//             let cat = que.category;\n//             let answers = que.answers;\n//             let userInput = prompt(`Name ${cat}...`);\n//             let reply = userInput.toLowerCase();\n//             if (answers.includes(reply)) {\n//                 alert(\"Correct!\");\n//                 tally += 1;\n//                 ques.pop(); //remove the last\n//             }\n//             else if (reply === 'hint') {\n//                 let anAns = randomChoice(answers);\n//                 //hint 3 letters\n//                 if (anAns.length >= 3) {\n//                     let hint = anAns.slice(0, 3); //first 3 letters\n//                     let rest = '-'.repeat(anAns.slice(3).length);\n//                     alert(hint + rest);\n//                 }\n//                 //in case word is too short>>hint only 1 letter\n//                 else {\n//                     let hint = anAns.slice(0); //first letter\n//                     let rest = '-'.repeat(anAns.slice(1).length);\n//                     alert(hint + rest);\n//                 }\n//             }\n//             else {\n//                 alert('Try again!');\n//             }\n//         }\n//         if (tally >= 5) {\n//             let reply = prompt('Well done! Play again?');\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\n//             if (yesReplies.includes(reply.toLowerCase())) {\n//                 tally = 0;\n//             }\n//             else {\n//                 alert('Ok bye!');\n//                 playing = false;\n//             }\n//         }\n//     }\n// }\n\n// game()\n\n// console.log(eligibleQues('z').length)","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\n\n//Instantiate a new obj for each new round of game\nimport { makeNewQuestions, randomChoice } from './game_codes/game'\nconst quesJSON = require('./game_codes/questions.json') //Source of game questions; require() only works on server\n// let qs=makeNewQuestions(quesJSON)\n// console.log(qs.letter)\n// console.log(qs.ques)\n\n//Using \"Natural\" NLP library\nconst natural = require('natural'),\nnounInflector = new natural.NounInflector();\n// let singular = nounInflector.singularize('those tomatoes');\n// console.log(singular); //>>those tomato\n\n\n\n//Add context.skips, context.hintsGiven & guard states??\n\n\nconst clearRecResult: Action<SDSContext, SDSEvent> = assign((context) => { return { recResult:''} })\nconst clearTTSAgenda: Action<SDSContext, SDSEvent> = assign((context) => { return { ttsAgenda:''} })\nconst resetTally: Action<SDSContext, SDSEvent> = assign((context) => { return { tally:0} })\nconst clearLetter: Action<SDSContext, SDSEvent> = assign((context) => { return { letter:undefined} })\n\nconst confettiOn: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:true} })\nconst confettiOff: Action<SDSContext, SDSEvent> = assign((context) => { return { confettiSwitch:false} })\n\nconst gameOn: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:true} })\nconst gameOff: Action<SDSContext, SDSEvent> = assign((context) => { return { playingNow:false} })\n\n//Initiate a questions object & assign values to context.letter/questions/tally\nconst newGameRound: Action<SDSContext, SDSEvent> = assign((context) => { \n    let qs=makeNewQuestions( quesJSON );\n    console.log(`Last round:${context.lastLetter}`)\n    console.log(qs.ques)\n    return { letter: qs.letter, questions: qs.ques, tally:0, skipped:0, hinted:0, confettiSwitch:false} \n})\n//After chosen a letter and before going saying it, remember it for referece of next game round\nconst rememberLetter: Action<SDSContext, SDSEvent> = assign((context) => { \n    return { lastLetter: context.letter} \n})\n// const remember3Letters: Action<SDSContext, SDSEvent> = assign((context) => { \n//     let last3Letters= context.lastLetters? context.lastLetters : []\n//     last3Letters.push(context.letter)\n//     if(last3Letters.length>3){\n//         last3Letters.shift()\n//     }\n//     return { lastLetters: last3Letters} \n// })\n\n\n//Say the current random letter and a 'spelling/phonetic' alphabet\nfunction letterNow(context:SDSContext){\n    const alphabet:any = {\n        'a':'Adam', 'b':'Bella', 'c':'Cindy', 'd':'Daniel', 'e':'Emma', 'f':'Frida', 'g':'Gabriel', 'h':'Hannah',\n        'i':'Ida', 'j':'Jennifer', 'k':'Kevin', 'l':'Laura', 'm':'Michael', 'n':'Nicole', 'o':'Oscar', 'p':'Paula',\n        'q':'Quebec', 'r':'Rachel', 's':'Sophia', 't':'Tina', 'u':'unique', 'v':'Victoria', 'w':'William', 'x':'x-ray',\n        'y':'Yasmin', 'z':'Zara'\n        }\n    let letter:string = context.letter\n    return `Your letter is \"${letter.toUpperCase()}\" for \"${alphabet[letter]}\". `\n}\n\nfunction questionNow(context:SDSContext){\n    let category = context.questions[0].category //the question at front of array\n    return `Name ${category}. `\n}\n\nfunction giveHint(context:SDSContext){\n    let answers = context.questions[0].answers //answers to the question at front of array\n    let anAns = randomChoice(answers)\n    if (anAns.length >= 3) {\n        let hint = anAns.slice(0, 3).toUpperCase() //first 3 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}, ${hint[2]}.`\n    }\n    //in case word is too short>>hint only 2 letters\n    else {\n        let hint = anAns.slice(0, 2).toUpperCase() //first 2 letters\n        return `Spelled with ${hint[0]}, ${hint[1]}.`\n    }\n}\n\n//Partial match of user input, as long as input mentions an answer\nfunction answerMatches(input:string,context:SDSContext){\n    let reply = input.toLowerCase() //convert to lowercase\n    let replySing = nounInflector.singularize( reply ) //convert to singular form\n\n    let answers = context.questions[0].answers //answers to the question at front of array\n\n    //True if reply--either original or singularised--mentions an answer \n    //(eg, 'the Netherlands' matches 'netherlands'; 'these strawberries' matches 'strawberry')\n    return  (exists(reply, answers) || exists(replySing, answers)) \n}\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction sharedRecognitions() {\n    return [\n        { target: 'stop', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'stop' },\n        { target: 'restart', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'restart' },\n        //for testing \n        { target: 'winning', cond: (context:SDSContext) => sayKeyword(context.recResult) === 'shortcut' },\n        { target: \".nomatch\" }\n        ]\n}\n\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: promptEvent,\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN'),\n            },\n            nomatch: { entry: [say(\"Try again\")],  \n                       on: { ENDSPEECH: \"prompt\" } \n            },\n        }\n    })\n}\n\n\n// Similar to python: any(keyword in input for keyword in keywords)\nfunction exists(input:string, keywords:string[]){\n    let existence = keywords.some(keyword => input.includes(keyword))\n    return existence\n}\n//Replace this with grammar parser?\nfunction sayKeyword(reply: string){\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\", \"ok\"]\n    let no=[\"no\", \"nope\", \"no thanks\", \"nah\",]\n    let pass=[\"skip\", \"pass\", \"next\",]\n    let hint=[\"hint\", \"clue\", \"help\"]\n    let whatletter=['letter','repeat']\n    let stop=['stop','end the game','shut down']\n    let restart=['restart','start again', 'reboot']\n    let shortcut=['short cut', 'shortcut'] //for testing\n\n    reply=reply.toLowerCase()\n    if(exists(reply, yes)){ return 'yes' }\n    if(exists(reply, no)){ return 'no' }\n    if(exists(reply, pass)){ return 'pass' }\n    if(exists(reply, hint)){ return 'hint' }\n    if(exists(reply, whatletter)){ return 'whatletter' }\n    if(exists(reply, stop)){ return 'stop' }\n    if(exists(reply, restart)){ return 'restart' }\n    if(exists(reply, shortcut)){ return 'shortcut' } //for testing\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'start'\n            }\n        },\n        stop: {\n            entry: say(\"Ok bye!\"),\n            on: { ENDSPEECH: {\n                actions: [resetTally,clearLetter,clearTTSAgenda,clearRecResult,confettiOff, gameOff],\n                target:\"init\",\n                } \n            }\n        },\n        //Start/restart new game: initiate new questions-object & reset tally counter\n        start: {\n            entry: say(\"Starting the game \"),\n            on: { ENDSPEECH: { target:\"chooseNewLetter\" } } \n        },\n        restart: {\n            entry: say(\"Ok, starting over\"),\n            on: { ENDSPEECH: {target:\"chooseNewLetter\" } } \n        },\n        chooseNewLetter :{\n            always:[\n                {actions: [newGameRound, clearTTSAgenda, clearRecResult],\n                 target: \"checkLastLetter\" }\n            ]\n        },\n\n        //After choosing letter, comparing to last letter game so that the new letter is not repeated\n        checkLastLetter: {\n            always: [\n                //if chosen letter is the same as last ones >> choose again\n                { cond: (context) => !!context.lastLetter && context.letter===context.lastLetter, \n                    target: 'chooseNewLetter', },\n\n                //chosen letter is different from last 3 letters >> remember it & resume game\n                { \n                  actions: [rememberLetter, gameOn, ],\n                  target: 'sayletter',  },\n            ]\n        },\n\n        //Starting the game for real from this state\n        //Say the letter\n        sayletter:{\n            entry: send((context)=>({ type: \"SPEAK\", value: letterNow(context) })),\n            on: {ENDSPEECH:'askQues' }\n        },\n\n        //Ask 5 (or more if skipping) questions \n        askQues: {\n            on: {\n                RECOGNISED: [\n                    \n                    // ? Clear recResult after recognition or not...?\n                    // If answer matches answers, tally+=1, shift question[0]\n                    {cond: (context:SDSContext) => answerMatches(context.recResult, context),\n                     actions: assign((context:SDSContext) => { \n                        context.questions.shift()\n                        return { tally: context.tally+1 } }),\n                     target:\"checkscore\"  },\n                    \n                    //If pass, move the question to the last (unshift & push)\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='pass', target:\"skip\"  },\n\n                    //Hint 3 or 2 letters\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='hint', target:\"hint\"},\n\n                    //Repeat letter\n                    {cond: (context:SDSContext) => sayKeyword(context.recResult)==='whatletter', target:\"sayletter\"},\n\n                    //Else    \n                    ...sharedRecognitions(),\n                    \n                ]},\n                ...promptAndAsk( send((context)=>({ type: \"SPEAK\", \n                                                    value: questionNow(context) })) )\n        },\n\n        skip: {\n            initial: 'checkSkipped',\n            states:{\n                checkSkipped:{\n                    always:[\n                        { target: 'letSkip', cond: (context) => context.skipped<5 },\n                        { target: 'maxSkipped', cond: (context) => context.skipped>=5 },\n                    ]\n                },\n                //move the question to the last (unshift & push); context.skipped++\n                letSkip:{\n                    entry:  assign((context:SDSContext) => { \n                        let skipped=context.questions.shift();\n                        context.questions.push(skipped);\n                        console.log(`Skipped so far: ${context.skipped+1} `)\n                        console.log(context.questions)\n                        return { skipped:context.skipped+1} }),\n                    always: '#checkscore'\n                },\n                maxSkipped:{\n                    entry: say(`Oops, you've skipped for too many times!`),\n                    on:{ ENDSPEECH: {target:'#checkscore'}}\n                }\n            }\n        },\n\n        hint: {\n            initial: 'checkHinted',\n            states:{\n                checkHinted:{\n                    always:[\n                        { target: 'giveHint', cond: (context) => context.hinted<5 },\n                        { target: 'maxHinted', cond: (context) => context.hinted>=5 },\n                    ]\n                },\n                //Hint 3 or 2 letters or a random answer; context.hinted++\n                giveHint:{\n                    entry: [\n                        send((context)=>({ type: \"SPEAK\", value: giveHint(context) })),\n                        assign((context:SDSContext) => {\n                            console.log(`Hinted so far: ${context.hinted+1} `);\n                            return { hinted:context.hinted+1} })\n                    ],\n                    always: '#checkscore' // use 'on endspeech...' if we want the question being said again\n                },\n                maxHinted:{\n                    entry: say(`Oops, you've asked for too many hints!`),\n                    on:{ ENDSPEECH: {target:'#checkscore'}}\n                }\n            }\n        },\n        \n        checkscore:{\n            id:\"checkscore\",\n            always: [\n                //Less than 5 correct\n                { target: 'askQues', cond: (context) => context.tally<5 },\n\n                //5 correct\n                { target: 'winning', cond: (context) => context.tally>=5 },\n            ]\n        },\n\n                    //? reset/clear tally here or not...? \n        winning: {\n            entry: [ say(\"Winner winner chicken dinner\"), confettiOn, clearTTSAgenda ], \n            on: {ENDSPEECH:{target:'playagain'}}\n        },\n        playagain: {\n            entry: [ clearRecResult, confettiOff, resetTally, clearLetter, gameOff,],\n            on: {\n                RECOGNISED: [\n                     //Play again? restart:stop\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='yes', target:\"restart\"},\n                     {cond: (context:SDSContext) => sayKeyword(context.recResult)==='no', target:\"stop\"},\n\n                    //Else    \n                    ...sharedRecognitions() \n                ]},\n                ...promptAndAsk( say('Want to play again?') )\n        }, \n        \n    },\n\n})","import * as React from \"react\";\n\n//XState library & Game DM-machine\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { dmMachine } from './dmGame';\n\n\n//Animation effects\nimport Confetti from 'react-dom-confetti';\nimport TextLoop from \"react-text-loop\";\nimport { useWindupString } from \"windups\";\n        // import HeadShake from 'react-reveal/HeadShake';\nconst HeadShake = require('react-reveal/HeadShake'); //?import shows error in TS, so use require() here instead\nconst RubberBand = require('react-reveal/RubberBand');\n\nimport Tippy from '@tippyjs/react';\n// import 'tippy.js/dist/tippy.css'; \n\n\n\n//Browser detection \nimport { isChrome, isEdge } from \"react-device-detect\";\n\n\n// import { inspect } from \"@xstate/inspect\";\n// inspect({ url:\"https://statecharts.io/inspect\", iframe: false });\n\n\n// State machines: ASR-TTS (voice interface) & dmGame\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine  //dmGame\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        progress: {\n                        },\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;  //==dm context >>access via props.state.context\n}\n//COMPONENT: Big button in the middle, with changing texts\nconst ReactiveButton = (props: Props,): JSX.Element => {\n    const {playingNow} = props.state.context\n    const {ttsAgenda} = props.state.context\n\n    const maxHinted = props.state.context.hinted >= 5\n\tconst maxSkipped = props.state.context.skipped >= 5\n\n    let promptInGame:string;\n    if(maxSkipped && maxHinted){promptInGame = '...or say Restart, Stop'}\n    else if(maxSkipped && !maxHinted){promptInGame = '...or say Clue, Restart, Stop'}\n    else if(!maxSkipped && maxHinted){promptInGame = '...or say Skip, Restart, Stop'}\n    else {promptInGame = '...or say Clue, Skip, Restart, Stop'}  //default\n\n    let speakingText= playingNow? '😼 '+ttsAgenda : '😻 '+ttsAgenda\n    let promptMsg = playingNow? promptInGame : \"...say Yes or No\"\n\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\"}} {...props}>\n                    {/* Listening... */}\n\n                    <TextLoop mask={true} interval={5000} springConfig={{ stiffness: 170, damping: 8 }} >\n                        <div><code> {speakingText} </code></div>\n                        <div><code> {promptMsg} </code></div>\n                    </TextLoop>\n\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            \n            const [spokentext] = useWindupString(speakingText); // adds char-by-char animation\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    {/* Speaking... */}\n                    <code>{spokentext}</code>\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    <HeadShake>Play game!</HeadShake>\n                </button >\n            );\n    }\n}\n\n// //MAIN CONTAINER: React webpage elements & VOI\nexport default function App() {\n    \n    //Voice interface events (& console logs)\n    //Text to speech:\n    const { speak, cancel, speaking, voices } = useSpeechSynthesis({\n        onEnd: () => {send('ENDSPEECH') },\n    });\n\n    //Speech to text\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {send({ type: \"ASRRESULT\", value: result })  },\n    });\n\n    //List the supported synthesis-voices on the browswer:\n    const [voiceIndex, setVoiceIndex] = React.useState(null);\n    // console.log(voices) //An array of available voices/languages ... varies depending on the computer/browser\n    // const voice =  voices[5] || null; // voices[idx]? voices[idx] : null *(browser default voice)\n\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a voice input.');\n                listen({\n                    interimResults: false,\n                    continuous: true,\n                    lang: 'en-SG'  //Config recognition language here. //list of langs https://cloud.google.com/speech-to-text/docs/languages\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda\n                        /*, voice*/ //Config which language/voice to speak in\n                     }) \n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            }),\n            speak: asEffect((context) => {\n\t            console.log('Speaking...');\n                speak({text: context.ttsAgenda })\n            }) \n        }\n    });\n\n    // dmMachine-context / React-states, to display on webpage or turn components on/off\n    const { confettiSwitch } = current.context; //triggers confetti when true\n    const { playingNow } = current.context;\n    const { tally } = current.context;\n    const { letter } = current.context;\n    \n    // Config for confetti \n    const confettiConfig = {\n        angle: 90,\n        spread: 360,\n        startVelocity: 80,\n        elementCount: 400,\n        dragFriction: 0.12,\n        duration: 7500,\n        stagger: 1,\n        width: \"7px\",\n        height: \"7px\",\n        perspective: \"210px\",\n        colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n      };\n    \n    let clicked=0;\n    const handleClick = () =>{ \n        if(clicked===0){ console.log(\"clicked\"); send('CLICK'); clicked=1 }\n        else{ console.log(\"unclicked\"); send('UNCLICK'); clicked=0 }\n    }\n\n    //>>>JSX codes & various components\n    \n    // Alt page: Show if not using Chrome or Edge\n    if(!isChrome && !isEdge)\n    return (\n        <div className='OtherBrowsers'>  \n            <HeadShake>\n            <div className='Box'>   \n                <h1>Speech Recognition Not Supported :( </h1>\n                <p>I won't be able to hear you on this browser.</p>\n                <p>Please try Chrome or Edge. :-)</p>\n            </div>\n            </HeadShake>\n        </div>\n      )\n\n    //Show if using Chrome or Edge\n    return (\n        <div className='main'>\n            <div className=\"PopoverButtons\"> <PopoverButtons/> </div>\n            <div className=\"App\">\n                \n                <div className=\"LetterAndHeart\">\n                    <div className=\"GlowLetter\"> <YourLetter letter={letter}/> </div>\n                    <div className=\"Heart\"> \n                        {playingNow && <HeartBar currentScore={tally} maxScore={5} size={50} />  }\n                    </div> \n                </div>\n                \n                <Confetti active={ confettiSwitch } config={ confettiConfig }/> \n\n                <RubberBand>\n                    <div className=\"Button\"> \n                        <ReactiveButton state={current} onClick={() => {handleClick()}} /> \n                    </div>\n                </RubberBand>\n\n                <div className=\"Subtitles\"> \n                    {/* VersionA: FOR Github deployment & Canvas submission */}\n                    <YourSubtitles state={current}/> \n\n                    {/* Version B: FOR demo (on local cuz it cannot show on Github page) */}\n                    <UserSubtitles state={current}/> \n                </div>\n            \n            </div>\n\n        </div>\n    )\n};\n\n//COMPONENT: Displaying input of voice interface (ie, recResult)\nconst YourSubtitles=(props:Props) =>{\n    // Player's speech-- only displays when recResult!=undefined \n\n    const {tally} = props.state.context\n    const {recResult} = props.state.context\n    //Prefix face changes based on score of the game\n    const  emojis=['😗','🙂','😀','😄','😁','🥳']\n    let emoji=tally? emojis[tally]:'🙃'\n\n    let subtitlesText:string;\n    if(props.state.matches({ asrtts: 'recognising' })){\n        subtitlesText=emoji+' Listening...'\n    }else if(recResult && recResult!=''){\n        subtitlesText = emoji+' '+recResult\n    }else{\n        subtitlesText = ''\n    }\n\n    const [textAnimated] = useWindupString(subtitlesText);\n    return(\n        <div>\n            <span> {textAnimated} </span>\n        </div>\n    )\n}\n\n//This one doesn't show on Github pages...? but can run locally and use for presentation demo\nconst UserSubtitles=(props:Props) =>{\n\n    const {tally} = props.state.context\n    const {recResult} = props.state.context\n    // const recResult='testing text'\n\n    const  emojis=['😗','🙂','😀','😄','😁','🥳']\n    let emoji= tally? emojis[tally]:'🙃'\n\n    // const defaultText = props.state.matches({ asrtts: 'recognising' })? 'Listening...' : ''\n    // const subtitlesText = recResult? recResult : defaultText\n\n    let subtitlesText:string;\n    if(props.state.matches({ asrtts: 'recognising' })){\n        subtitlesText='Listening...'\n    }else if(recResult && recResult!=''){\n        subtitlesText = recResult\n    }else{\n        subtitlesText = ''\n    }\n\n    const [textAnimated] = useWindupString(subtitlesText);\n    const showing = subtitlesText!=''\n    return(\n        <div id='emoji-and-bubble'>\n            {showing &&  <span className='speech-bubble'> {textAnimated} </span> }\n            {showing && <div id='emoji'> {emoji} </div>}\n        </div>\n    )\n}\n\n//COMPONENT: Capital letter of the game\nconst YourLetter=(props:any) =>{\n    // Shows the letter of the current game round \n    const letter = props.letter\n    return(\n        <div> \n            {letter? letter.toUpperCase():''}\n        </div> \n    )\n}\n\n//COMPONENT: Grey heart to be filled with pink, based on percentage\nconst HeartBar = (props:any) => {\n    \n    const maxScore = props.maxScore\n    const currentScore = props.currentScore>0? props.currentScore : ''\n    const size = props.size\n    const percentage = currentScore? 100*currentScore/maxScore : 0\n    //add other props? eg, showScore={true/false}; showPercentage={true/false}\n\n\n    const y = 24 - (24 * percentage) / 100; //Height of the pink filling shape\n\n    //Below: Heart-shaped vector graphs & text inside\n    return (\n      <div className=\"ProgressBarH\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={size}\n          height={size}\n          viewBox=\"0 0 24 24\"\n        >\n          <defs>\n            <clipPath id=\"cut-off-bottom\">\n              <rect x=\"0\" y={y} width=\"24\" height=\"24\" />\n            </clipPath>\n          \n            <linearGradient id=\"grey-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#cfccce\" stopOpacity=\"0.75\" />\n                <stop offset=\"60%\" stopColor=\"#bab8ba\" stopOpacity=\"0.85\" />\n                <stop offset=\"100%\" stopColor=\"#949293\" stopOpacity=\"0.9\" />\n            </linearGradient>\n\n            <linearGradient id=\"pink-grad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                <stop offset=\"0%\" stopColor=\"#ff33a7\" stopOpacity=\"0.95\" />\n                <stop offset=\"60%\" stopColor=\"#ff2667\" stopOpacity=\"0.95\" />\n                <stop offset=\"100%\" stopColor=\"rgb(255,0,0)\" stopOpacity=\"0.95\" />\n            </linearGradient>\n\n          </defs>\n          \n          <path\n            style={{ fill: \"url(#grey-grad)\" }}\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\n            />\n\n          <path\n            style={{ fill: \"url(#pink-grad)\", }}\n            d=\"M12 4.248c-3.148-5.402-12-3.825-12 2.944 0 4.661 5.571 9.427 12 15.808 6.43-6.381 12-11.147 12-15.808 0-6.792-8.875-8.306-12-2.944z\"\n            clipPath=\"url(#cut-off-bottom)\"\n            />\n\n          <text textAnchor=\"middle\" x=\"12\" y=\"15\" color=\"white\" fontSize=\"11\" fill=\"white\" opacity=\"0.45\"\n                style={{animation: \"wiggle 2.5s ease-out infinite\", animationDelay:'0.9s'}}>\n            {currentScore} \n          </text>\n\n        </svg>\n      </div>\n    );\n  };\n\nconst PopoverButtons = () => {\n\n\n    return (\n        <div>\n\n            <Tippy content={\n                <div>\n                <h4>Having troubles playing? :</h4>\n            \n                    <p>\n                    Due to limitations of the voice recogniser, these might help... <br></br><br></br>\n                    -Speak in a North American accent.<br></br><br></br>\n                    -After the cat finishes talking, wait for a sec for it to start listening to you\n                    (indicated by the <strong>flashing button</strong>).\n                    </p>\n                </div>\n            } className=\"popover-box\">\n                <button className=\"round-button\">?</button>\n            </Tippy>\n\n            <Tippy content={\n                    <div>\n                    <h4>ABC Game</h4>\n                        <p>\n                        Designed & made by: <br></br>\n                        Liao Hsien-hao Calvin<br></br>\n                        Eirini Tsakiri <br></br><br></br>\n                        for the project of <strong>LT2216 Dialogue Systems</strong> at Göteborgs universitet.\n                        <br></br><br></br>\n                        github.com/chickenbror/ABCgame\n                        </p>\n                    </div>\n            }  className=\"popover-box\">\n                <button className=\"round-button\">i</button>\n            </Tippy>\n\n\n        </div>\n    )\n}","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\n\n//Components\nimport App from \"./App\";\n\n\n//React dom components rendering\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( <App/>, rootElement );\n"],"sourceRoot":""}